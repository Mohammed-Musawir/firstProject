<%- include('../Partials/admin/adminHeader') %>
<style>
  .btn-offer {
    background-color: white;
    color: #6366f1; /* Indigo color */
    border: 1px solid #6366f1;
    min-width: 76px;
  }
  
  .btn-offer:hover {
    background-color: #6366f1;
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  
  /* Modal styling */
  .modal-content {
    border-radius: 10px;
    border: none;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
  }
  
  .modal-header {
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
    padding: 1rem 1.5rem;
  }
  
  .modal-body {
    padding: 1.5rem;
  }
  
  .modal-footer {
    border-top: 1px solid var(--brown-200);
    padding: 1rem 1.5rem;
  }
  
  /* Toast notification styling */
  .toast {
    background-color: white;
    border-left: 4px solid var(--brown-600);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
  
  .toast-header {
    background-color: white;
    color: var(--brown-700);
    border-bottom: 1px solid var(--brown-200);
  }
  
  .toast-body {
    color: var(--brown-800);
  }
  :root {
    --brown-100: #f5f0e8;
    --brown-200: #e6d7c3;
    --brown-300: #d4bea2;
    --brown-400: #c1a68c;
    --brown-500: #b08d6c;
    --brown-600: #9a7b5f;
    --brown-700: #846a51;
    --brown-800: #6b5440;
    --brown-900: #524030;
    --green-500: #10b981;
    --green-600: #059669;
    --green-100: #d1fae5;
    --red-500: #ef4444;
    --red-600: #dc2626;
    --red-100: #fee2e2;
  }
  
  .bg-brown {
    background-color: var(--brown-600) !important;
  }
  
  .bg-light-brown {
    background-color: var(--brown-100) !important;
  }
  
  .bg-gradient-brown {
    background: linear-gradient(to right, var(--brown-700), var(--brown-500)) !important;
  }
  
  .text-brown {
    color: var(--brown-700) !important;
  }
  
  .btn-brown {
    background-color: var(--brown-600);
    color: white;
  }
  
  .btn-brown:hover {
    background-color: var(--brown-700);
    color: white;
  }
  
  .btn-outline-brown {
    border-color: var(--brown-600);
    color: var(--brown-600);
  }
  
  .btn-outline-brown:hover {
    background-color: var(--brown-600);
    color: white;
  }
  
  .card {
    margin-top: 70px;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 4px 20px rgba(0,0,0,0.05) !important;
  }
  
  .card-header {
    padding: 1rem 1.5rem;
  }
  
  .empty-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 2rem;
  }
  
  .table {
    border: 1px solid var(--brown-200);
  }

  .table th, 
  .table td {
    border: 1px solid var(--brown-200);
    vertical-align: middle;
    padding: 0.75rem 1rem;
  }

  /* Action Buttons Styling */
  .action-buttons {
    display: flex;
    gap: 2px;
    justify-content: flex-end;
    width: 100%;
  }
  
  .action-buttons .btn {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 6px 10px;
    border-radius: 4px;
    font-weight: 500;
    font-size: 0.8rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    white-space: nowrap;
  }
  
  .action-buttons .btn i {
    margin-right: 4px;
    font-size: 0.9rem;
  }
  
  .btn-edit {
    background-color: var(--brown-600);
    color: white;
    border: none;
    min-width: 76px;
  }
  
  .btn-edit:hover {
    background-color: var(--brown-700);
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  
  .btn-delete {
    background-color: white;
    color: var(--red-600);
    border: 1px solid var(--red-600);
    min-width: 76px;
  }
  
  .btn-delete:hover {
    background-color: var(--red-500);
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  
  /* Status Button Styling */
  .status-btn {
    min-width: 80px;
    padding: 0.4rem 0.75rem;
    border-radius: 4px;
    font-weight: 500;
    border: none;
    transition: all 0.2s ease;
    font-size: 0.85rem;
  }
  
  .btn-active {
    background-color: var(--green-100);
    color: var(--green-600);
  }
  
  .btn-active:hover {
    background-color: var(--green-500);
    color: white;
  }
  
  .btn-inactive {
    background-color: var(--red-100);
    color: var(--red-600);
  }
  
  .btn-inactive:hover {
    background-color: var(--red-500);
    color: white;
  }

  /* Responsive handling for smaller screens */
  @media (max-width: 991.98px) {
    .action-buttons {
      flex-direction: row;
      width: 100%;
    }
    
    .action-buttons .btn {
      padding: 5px 8px;
      font-size: 0.75rem;
    }
    
    .action-buttons .btn i {
      margin-right: 3px;
    }
  }
  
  @media (max-width: 767.98px) {
    .action-buttons .btn span {
      display: none;
    }
    
    .action-buttons .btn i {
      margin-right: 0;
    }
    
    .action-buttons .btn {
      min-width: auto;
      width: 36px;
      height: 36px;
    }
  }
  
  /* SweetAlert Custom Styling */
  .swal2-popup {
    border-radius: 10px;
    font-family: inherit;
  }
  
  .swal2-title {
    color: var(--brown-800);
  }
  
  .swal2-html-container {
    color: var(--brown-700);
  }
  
  .swal2-confirm {
    background-color: var(--brown-600) !important;
    box-shadow: 0 2px 6px rgba(0,0,0,0.15) !important;
  }
  
  .swal2-confirm:hover {
    background-color: var(--brown-700) !important;
  }
  
  .swal2-cancel {
    background-color: #6c757d !important;
    box-shadow: 0 2px 6px rgba(0,0,0,0.1) !important;
  }
  
  .swal2-success-ring {
    border-color: var(--green-500) !important;
  }
  
  .swal2-success-line-tip,
  .swal2-success-line-long {
    background-color: var(--green-500) !important;
  }
  
  .swal2-error {
    border-color: var(--red-500) !important;
  }

  .action-buttons-stack {
    display: flex;
    flex-direction: column;
    gap: 10px;
    min-width: 140px;
  }
  
  .action-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 8px 15px;
    border-radius: 6px;
    font-weight: 600;
    font-size: 13px;
    letter-spacing: 0.5px;
    transition: all 0.2s ease;
    border: none;
    width: 100%;
    text-decoration: none;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
  }
  
  .action-btn i {
    margin-right: 8px;
    font-size: 14px;
  }
  
  .edit-btn {
    background-color: #f8f9fa;
    color: #495057;
    border: 1px solid #dee2e6;
  }
  
  .edit-btn:hover {
    background-color: #e9ecef;
    color: #212529;
  }
  
  .add-offer-btn {
    background-color: #9a7b5f;
    color: white;
  }
  
  .add-offer-btn:hover {
    background-color: #846a51;
  }
  
  .remove-offer-btn {
    background-color: #dc3545;
    color: white;
  }
  
  .remove-offer-btn:hover {
    background-color: #c82333;
  }
  
  .delete-btn {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
  }
  
  .delete-btn:hover {
    background-color: #f1b0b7;
  }

/* Offer column styling */
.offer-col {
  min-width: 140px;
}

.offer-container {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 4px;
}

.offer-main .badge {
  font-size: 0.85rem;
  padding: 5px 8px;
}

.offer-type .badge {
  font-size: 0.75rem;
  padding: 3px 6px;
  background-color: #f5f0eb !important;
  color: #9a7b5f !important;
  border: 1px solid #e0d5cc;
}

.no-offer-container {
  display: flex;
  align-items: center;
  color: #adb5bd;
  font-size: 0.85rem;
}

.no-offer-container i {
  opacity: 0.6;
}
</style>

<body>
  <div class="container-fluid py-4">
    <div class="row">
      <div class="col-12">
        <div class="card bg-white shadow-sm border-0 mb-4">
          <div class="card-header bg-gradient-brown d-flex justify-content-between align-items-center">
            <h4 class="text-white mb-0">Product Management</h4>
          </div>
          <div class="card-body p-0">
            <div class="table-responsive">
              <table class="table table-hover align-middle mb-0">
                <thead class="bg-light">
                  <tr>
                    <th class="text-brown px-3">Name</th>
                    <th class="text-brown">Category</th>
                    <th class="text-brown">regularPrice</th>
                    <th class="text-brown">salePrice</th>
                    <th class="text-brown">Quantity</th>
                    <th class="text-brown">Offer</th>
                    <th class="text-brown text-center">Status</th>
                    <th class="text-brown text-end px-3">Action</th>
                  </tr>
                </thead>
                <tbody>
                  <% if (products && products.length > 0) { %>
                    <% products.forEach(product => { %>
                      <tr>
                        <td class="px-3"><%= product.name %></td>
                        <td><span class="badge bg-light-brown text-brown">
                          <%= product.category_id && product.category_id.name && product.category_id.isListed ? product.category_id.name : 'CategoryDisabled' %>
                        </span></td>
                        <td>₹<%= product.regularPrice.toFixed(2) %></td>
                        <td> ₹<%= product.salePrice.toFixed(2) %> </td>
                        <td><%= product.availableQuantity %></td>


                        <td class="offer-col">
                          <% if (product.productOffer || product.categoryOffer) { %>
                            <div class="offer-container">
                              <% if (product.productOffer) { %>
                                <div class="offer-main mb-1">
                                  <span class="badge bg-primary">
                                    <i class="fas fa-box me-1"></i><%= product.productOffer.discountPercentage %>% off - Product offer
                                  </span>
                                </div>
                              <% } %>
                              
                              <% if (product.categoryOffer) { %>
                                <div class="offer-main mb-1">
                                  <span class="badge bg-info text-dark">
                                    <i class="fas fa-boxes me-1"></i><%= product.categoryOffer.discountPercentage %>% off - Category offer
                                  </span>
                                </div>
                              <% } %>
                              
                              <% if (product.discountPercentage) { %>
                                <div class="best-offer">
                                  <span class="badge bg-success">
                                    <i class="fas fa-tag me-1"></i>Best offer: <%= product.discountPercentage %>% off
                                  </span>
                                </div>
                              <% } %>
                            </div>
                          <% } else { %>
                            <div class="no-offer-container">
                              <span class="text-muted">
                                <i class="fas fa-times-circle me-1"></i>No offer
                              </span>
                            </div>
                          <% } %>
                        </td>
  

                        <td class="text-center">
                          <button type="button" 
                                  class="btn btn-sm status-btn <%= product.isBlocked ? 'btn-inactive' : 'btn-active' %>"
                                  onclick="updateStatus('<%= product._id %>', '<%= product.isBlocked %>', '<%= product.name %>')">
                            <%= product.isBlocked ? 'Blocked' : 'Active' %>
                          </button>
                        </td>
  
                        <td class="text-end px-3">
  
                          <div class="action-buttons-stack">
                            <a href="/admin/product-edit/<%= product._id %>" class="action-btn edit-btn">
                              <i class="fas fa-edit"></i>
                              <span>EDIT</span>
                            </a>
                            
                            <% if (product.productOffer) { %>
                              <button type="button" class="action-btn remove-offer-btn"
                              onclick="confirmRemoveOffer('<%= product._id %>', '<%= product.name %>')">
                              <i class="fas fa-tag-slash"></i>
                              <span>REMOVE PRODUCT OFFER</span>
                            </button>
                          
                              <% if (product.productOffer.isActive) { %>
                                <!-- Show deactivate button for active product offers -->
                                <button type="button" class="action-btn btn-active"
                                onclick="updateOfferStatus('<%= product.productOffer.offerId %>', 'true', '<%= product.name %>', '<%= product._id %>')">
                          <i class="fas fa-check-circle"></i>
                          <span>OFFER ACTIVE</span>
                        </button>
                              <% } else { %>
                                <button type="button" class="action-btn btn-inactive"
                                  onclick="updateOfferStatus('<%= product.productOffer.offerId %>', 'false', '<%= product.name %>', '<%= product._id %>')">
                              <i class="fas fa-ban"></i>
                                <span>OFFER BLOCKED</span>
                              </button>
                              <% } %>
                          
                            <% } else if (product.categoryOffer) { %>
                              <!-- Add offer button for products with category offers but no product offer -->
                              <button type="button" class="action-btn add-offer-btn"
                                      onclick="showOfferModal('<%= product._id %>', '<%= product.name %>')">
                                <i class="fas fa-tag"></i>
                                <span>ADD PRODUCT OFFER</span>
                              </button>
                            <% } else { %>
                              <!-- Add offer button for products with no offers at all -->
                              <button type="button" class="action-btn add-offer-btn"
                                      onclick="showOfferModal('<%= product._id %>', '<%= product.name %>')">
                                <i class="fas fa-tag"></i>
                                <span>ADD OFFER</span>
                              </button>
                            <% } %>
                            
                            <button type="button" class="action-btn delete-btn" 
                            onclick="confirmDelete('<%= product._id %>', '<%= product.name %>')">
                      <i class="fas fa-trash-alt"></i>
                      <span>DELETE</span>
                    </button>
  
                        </td>



                      </tr>
                    <% }) %>
                  <% } else { %>
                    <tr>
                      <td colspan="7" class="text-center py-5">
                        <div class="empty-state">
                          <i class="fas fa-box-open fa-3x text-muted mb-3"></i>
                          <p>No products available yet</p>
                          <a href="/admin/addProducts" class="btn btn-brown">
                            Add your first product
                          </a>
                        </div>
                      </td>
                    </tr>
                  <% } %>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  
  <div class="modal fade" id="offerModal" tabindex="-1" aria-labelledby="offerModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header bg-gradient-brown">
          <h5 class="modal-title text-white" id="offerModalLabel">Add Offer</h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <!-- Removed form tag -->
          <input type="hidden" id="productId">
          <input type="hidden" id="offerType" value="product">
          
          <div class="mb-3">
            <label for="offerName" class="form-label">Offer Name</label>
            <input type="text" class="form-control" id="offerName" required>
          </div>
          
          <div class="mb-3">
            <label for="discountPercentage" class="form-label">Discount Percentage</label>
            <div class="input-group">
              <input type="number" class="form-control" id="discountPercentage" 
                     min="1" max="100" required>
              <span class="input-group-text">%</span>
            </div>
          </div>
          
          <div class="mb-3">
            <label for="endDate" class="form-label">End Date</label>
            <input type="datetime-local" class="form-control" id="endDate" required>
          </div>
          
          <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <textarea class="form-control" id="description" rows="3"></textarea>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-brown" id="saveOfferBtn">Save Offer</button>
        </div>
      </div>
    </div>
  </div>
  
  
  <!-- Include SweetAlert2 -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  
  <!-- JavaScript for handling deletion and status updates -->
  <script>
  document.addEventListener('DOMContentLoaded', function() {
    // Make these functions globally available
    window.confirmDelete = confirmDelete;
    window.updateStatus = updateStatus;
    window.showOfferModal = showOfferModal;
    window.confirmRemoveOffer = confirmRemoveOffer;
    
    // Set default end date to 7 days from now
    document.getElementById('endDate')?.addEventListener('focus', function() {
      if (!this.value) {
        const date = new Date();
        date.setDate(date.getDate() + 7);
        const dateString = date.toISOString().slice(0, 16);
        this.value = dateString;
      }
    });
    
    // Handle offer form submission
    document.getElementById('saveOfferBtn')?.addEventListener('click', saveOffer);
  });
  
  // Function to confirm product deletion
  function confirmDelete(productId, productName) {
    Swal.fire({
      title: 'Are you sure?',
      text: `You are about to delete ${productName}`,
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Delete',
      cancelButtonText: 'Cancel',
      confirmButtonColor: '#9a7b5f',
      cancelButtonColor: '#6c757d',
      backdrop: `rgba(132, 106, 81, 0.4)`,
      customClass: {
        popup: 'swal-custom-popup',
        title: 'swal-custom-title',
        content: 'swal-custom-content'
      }
    }).then((result) => {
      if (result.isConfirmed) {
        // Send delete request to backend
        fetch(`/admin/products-delete/${productId}`, {
          method: 'DELETE'
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            Swal.fire({
              title: 'Deleted!',
              text: 'Product deleted successfully!',
              icon: 'success',
              confirmButtonColor: '#9a7b5f',
              timer: 2000,
              timerProgressBar: true
            }).then(() => {
              window.location.reload();
            });
          } else {
            Swal.fire({
              title: 'Error',
              text: data.message || 'Failed to delete product',
              icon: 'error',
              confirmButtonColor: '#9a7b5f'
            });
          }
        }) 
        .catch(error => {
          console.error('Error:', error);
          Swal.fire({
            title: 'Error',
            text: 'An error occurred. Please try again.',
            icon: 'error',
            confirmButtonColor: '#9a7b5f'
          });
        });
      }
    });
  }
  
  // Function to update product status
  function updateStatus(productId, isBlocked, productName) {
    const newStatus = isBlocked === 'true' ? 'active' : 'blocked';
    const isActive = newStatus === 'active';
    const statusIcon = isActive ? 'success' : 'warning';
    
    Swal.fire({
      title: 'Confirm Status Change',
      text: `Are you sure you want to change ${productName} to ${newStatus}?`,
      icon: statusIcon,
      showCancelButton: true,
      confirmButtonText: 'Update Status',
      cancelButtonText: 'Cancel',
      confirmButtonColor: '#9a7b5f',
      cancelButtonColor: '#6c757d',
      backdrop: `rgba(132, 106, 81, 0.4)`
    }).then((result) => {
      if (result.isConfirmed) {
        fetch(`/admin/product-update-status/${productId}`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            isActive: isActive
          })
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          if (data.success) {
            Swal.fire({
              title: 'Updated!',
              text: `Product ${newStatus} successfully!`,
              icon: 'success',
              confirmButtonColor: '#9a7b5f',
              timer: 2000,
              timerProgressBar: true
            }).then(() => {
              window.location.reload();
            });
          } else {
            Swal.fire({
              title: 'Error',
              text: data.message || 'Failed to update product status',
              icon: 'error',
              confirmButtonColor: '#9a7b5f'
            });
          }
        })
        .catch(error => {
          console.error('Error:', error);
          Swal.fire({
            title: 'Error',
            text: 'An error occurred. Please try again.',
            icon: 'error',
            confirmButtonColor: '#9a7b5f'
          });
        });
      }
    });
  }
  
  // Function to show the offer modal
  function showOfferModal(productId, productName) {
    // Set product ID in the modal
    document.getElementById('productId').value = productId;
    
    // Set modal title with product name
    document.getElementById('offerModalLabel').textContent = `Add Offer for ${productName}`;
    
    // Reset form fields
    document.getElementById('offerName').value = '';
    document.getElementById('discountPercentage').value = '';
    document.getElementById('endDate').value = '';
    document.getElementById('description').value = '';
    
    // Show modal
    const offerModal = new bootstrap.Modal(document.getElementById('offerModal'));
    offerModal.show();
  }
  
  // Function to confirm removing offer
  function confirmRemoveOffer(productId, productName) {
    Swal.fire({
      title: 'Remove Offer',
      text: `Are you sure you want to remove the offer from ${productName}?`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Remove Offer',
      cancelButtonText: 'Cancel',
      confirmButtonColor: '#dc3545',
      cancelButtonColor: '#6c757d',
      backdrop: `rgba(132, 106, 81, 0.4)`,
      customClass: {
        popup: 'swal-custom-popup',
        title: 'swal-custom-title',
        content: 'swal-custom-content'
      }
    }).then((result) => {
      if (result.isConfirmed) {
        fetch(`/admin/remove-product-offer/${productId}`, {
          method: 'DELETE'
        })
        .then(response => response.json()
        )
        .then(data => {
          if (data.success) {
            Swal.fire({
              title: 'Removed!',
              text: 'Offer removed successfully!',
              icon: 'success',
              confirmButtonColor: '#9a7b5f',
              timer: 2000,
              timerProgressBar: true
            }).then(() => {
              window.location.reload();
            });
          } else {
            Swal.fire({
              title: 'Error',
              text: data.message || 'Failed to remove offer',
              icon: 'error',
              confirmButtonColor: '#9a7b5f'
            });
          }
        })
        .catch(error => {
          console.error('Error:', error);
          Swal.fire({
            title: 'Error',
            text: 'An error occurred. Please try again.',
            icon: 'error',
            confirmButtonColor: '#9a7b5f'
          });
        });
      }
    });
  }
  
  // Function to save the offer - direct fetching without FormData
  function saveOffer() {
    // Get values directly from elements
    const productId = document.getElementById('productId').value;
    const offerType = document.getElementById('offerType').value;
    const offerName = document.getElementById('offerName').value.trim();
    const discountPercentage = parseInt(document.getElementById('discountPercentage').value);
    const endDate = document.getElementById('endDate').value;
    const description = document.getElementById('description').value.trim();
    
    // Validation
    if (!offerName || !/^[A-Za-z\s]+$/.test(offerName)) {
      Swal.fire({
        title: 'Invalid Name',
        text: 'Offer name should only contain letters and cannot be empty',
        icon: 'error',
        confirmButtonColor: '#9a7b5f'
      });
      return;
    }
    
    // Validate discount percentage (between 1 and 90)
    if (isNaN(discountPercentage) || discountPercentage < 1 || discountPercentage > 90) {
      Swal.fire({
        title: 'Invalid Discount',
        text: 'Discount percentage must be between 1 and 90',
        icon: 'error',
        confirmButtonColor: '#9a7b5f'
      });
      return;
    }
    
    // Validate end date (must be in the future)
    const now = new Date();
    const endDateObj = new Date(endDate);
    if (endDateObj <= now) {
      Swal.fire({
        title: 'Invalid Date',
        text: 'End date must be in the future',
        icon: 'error',
        confirmButtonColor: '#9a7b5f'
      });
      return;
    }
    
    // Validate description (should not contain only numbers)
    if (description && /^\d+$/.test(description)) {
      Swal.fire({
        title: 'Invalid Description',
        text: 'Description should not contain only numbers',
        icon: 'error',
        confirmButtonColor: '#9a7b5f'
      });
      return;
    }
    
    // Create data object directly
    const formDataObj = {
      productId: productId,
      offerType: offerType,
      offerName: offerName,
      discountPercentage: discountPercentage,
      endDate: endDate,
      description: description
    };
    
    // Show loading state
    Swal.fire({
      title: 'Adding offer...',
      text: 'Please wait',
      allowOutsideClick: false,
      showConfirmButton: false,
      willOpen: () => {
        Swal.showLoading();
      }
    });
    

    // Send data to server
    fetch('/admin/add-product-offer', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(formDataObj)
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        // Hide modal
        bootstrap.Modal.getInstance(document.getElementById('offerModal')).hide();
        
        // Show success message
        Swal.fire({
          title: 'Success!',
          text: 'Offer added successfully!',
          icon: 'success',
          confirmButtonColor: '#9a7b5f',
          timer: 2000,
          timerProgressBar: true
        }).then(() => {
          window.location.reload();
        });
      } else {
        Swal.fire({
          title: 'Error',
          text: data.message || 'Failed to add offer',
          icon: 'error',
          confirmButtonColor: '#9a7b5f'
        });
      }
    })
    .catch(error => {
      console.error('Error:', error);
      Swal.fire({
        title: 'Error',
        text: 'An error occurred. Please try again.',
        icon: 'error',
        confirmButtonColor: '#9a7b5f'
      });
    });
  }
  
  // Function to show toast notification
  function showToast(title, message, type = 'success') {
    const toastContainer = document.getElementById('toastContainer');
    
    const toastEl = document.createElement('div');
    toastEl.className = 'toast';
    toastEl.setAttribute('role', 'alert');
    toastEl.setAttribute('aria-live', 'assertive');
    toastEl.setAttribute('aria-atomic', 'true');
    
    const iconClass = type === 'success' ? 'fas fa-check-circle text-success' : 
                      type === 'error' ? 'fas fa-exclamation-circle text-danger' : 
                      'fas fa-info-circle text-info';
    
    toastEl.innerHTML = `
      <div class="toast-header">
        <i class="${iconClass} me-2"></i>
        <strong class="me-auto">${title}</strong>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body">
        ${message}
      </div>
    `;
    
    toastContainer.appendChild(toastEl);
    
    const toast = new bootstrap.Toast(toastEl, {
      autohide: true,
      delay: 5000
    });
    
    toast.show();
    
    // Remove toast from DOM after it's hidden
    toastEl.addEventListener('hidden.bs.toast', function() {
      toastEl.remove();
    });
  }


  function updateOfferStatus(offerId, isActive, productName, productId) {
  const newStatus = isActive === 'true' ? 'blocked' : 'active';
  const willBeActive = newStatus === 'active';
  const statusIcon = willBeActive ? 'success' : 'warning';
  
  Swal.fire({
    title: 'Confirm Offer Status Change',
    text: `Are you sure you want to ${newStatus} the offer for ${productName}?`,
    icon: statusIcon,
    showCancelButton: true,
    confirmButtonText: 'Update Status',
    cancelButtonText: 'Cancel',
    confirmButtonColor: '#9a7b5f',
    cancelButtonColor: '#6c757d',
    backdrop: `rgba(132, 106, 81, 0.4)`
  }).then((result) => {
    if (result.isConfirmed) {
      fetch(`/admin/offer-update-status/${offerId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          isActive: willBeActive,
          productId: productId // Include the product ID
        })
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        if (data.success) {
          Swal.fire({
            title: 'Updated!',
            text: `Offer ${newStatus} successfully!`,
            icon: 'success',
            confirmButtonColor: '#9a7b5f',
            timer: 2000,
            timerProgressBar: true
          }).then(() => {
            window.location.reload();
          });
        } else {
          Swal.fire({
            title: 'Error',
            text: data.message || 'Failed to update offer status',
            icon: 'error',
            confirmButtonColor: '#9a7b5f'
          });
        }
      })
      .catch(error => {
        console.error('Error:', error);
        Swal.fire({
          title: 'Error',
          text: 'An error occurred. Please try again.',
          icon: 'error',
          confirmButtonColor: '#9a7b5f'
        });
      });
    }
  });
}

// Make updateOfferStatus globally available
document.addEventListener('DOMContentLoaded', function() {
  // Add to existing functions
  window.updateOfferStatus = updateOfferStatus;
});
  </script>
  <div id="toastContainer" class="position-fixed bottom-0 end-0 p-3" style="z-index: 11"></div>
</body>  
 


<%- include('../Partials/admin/adminFooter') %>