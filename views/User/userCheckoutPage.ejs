<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
    <title>Checkout</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
      @import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700&family=Poppins:wght@300;400;500;600&display=swap');

:root {
    --primary-color: #8B7355;
    --secondary-color: #D2B48C;
    --light-color: #F5F5DC;
    --border-color: #E6D7C3;
    --accent-color: #654321;
    --error-color: #CD5C5C;
    --success-color: #8FBC8F;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Poppins', sans-serif;
    background-color: var(--light-color);
    color: #333;
    line-height: 1.6;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

/* Breadcrumb Navigation */
.breadcrumb {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
    padding: 10px 15px;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
}

.breadcrumb-item {
    display: flex;
    align-items: center;
}

.breadcrumb-item a {
    color: var(--primary-color);
    text-decoration: none;
    font-weight: 500;
    transition: color 0.3s ease;
}

.breadcrumb-item a:hover {
    color: var(--accent-color);
}

.breadcrumb-item.active {
    color: var(--accent-color);
    font-weight: 600;
}

.breadcrumb-separator {
    margin: 0 10px;
    color: #999;
}

.breadcrumb-step {
    display: flex;
    align-items: center;
    position: relative;
}

.step-number {
    width: 24px;
    height: 24px;
    background-color: var(--primary-color);
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.8rem;
    margin-right: 8px;
}

.step-number.active {
    background-color: var(--accent-color);
}

.step-number.completed {
    background-color: var(--success-color);
}

.checkout-heading {
    font-family: 'Playfair Display', serif;
    color: var(--primary-color);
    margin-bottom: 30px;
    text-align: center;
    font-size: 2.5rem;
    font-weight: 600;
}

.checkout-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
}

/* Left side - Shipping & Payment */
.checkout-left {
    display: flex;
    flex-direction: column;
    gap: 30px;
}

.section {
    background-color: white;
    border-radius: 10px;
    padding: 25px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

.section-title {
    font-family: 'Playfair Display', serif;
    color: var(--primary-color);
    font-size: 1.5rem;
    margin-bottom: 20px;
    padding-bottom: 10px;
    border-bottom: 1px solid var(--border-color);
}

/* Address Section */
.address-list {
    display: grid;
    gap: 15px;
    margin-bottom: 20px;
}

.address-card {
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 15px;
    position: relative;
    transition: all 0.3s ease;
}

.address-card:hover {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.address-card.selected {
    border: 2px solid var(--accent-color);
    background-color: rgba(210, 180, 140, 0.1);
}

.address-type {
    position: absolute;
    top: 15px;
    right: 15px;
    background-color: var(--secondary-color);
    color: white;
    padding: 3px 10px;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 500;
}

.default-badge {
    background-color: var(--accent-color);
    color: white;
    padding: 3px 10px;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 500;
    margin-left: 10px;
}

.address-details {
    margin-bottom: 10px;
}

.address-actions {
    display: flex;
    gap: 15px;
}

.address-select {
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 5px;
    padding: 8px 15px;
    cursor: pointer;
    transition: all 0.3s ease;
}

.address-select:hover {
    background-color: var(--accent-color);
}

.add-address-btn {
    background-color: white;
    color: var(--primary-color);
    border: 2px solid var(--primary-color);
    border-radius: 5px;
    padding: 10px 20px;
    font-weight: 500;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    margin-top: 10px;
    width: max-content;
    transition: all 0.3s ease;
    text-decoration: none;
}

.add-address-btn:hover {
    background-color: var(--primary-color);
    color: white;
}

/* Payment Methods Section */
.payment-methods {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.payment-option {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 15px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
}

.payment-option:hover {
    background-color: rgba(210, 180, 140, 0.1);
}

.payment-option.selected {
    border: 2px solid var(--accent-color);
    background-color: rgba(210, 180, 140, 0.1);
}

.payment-radio {
    width: 20px;
    height: 20px;
    cursor: pointer;
}

.payment-icon {
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: var(--light-color);
    border-radius: 8px;
    font-size: 1.2rem;
    color: var(--primary-color);
}

.payment-details {
    flex: 1;
}

.payment-name {
    font-weight: 500;
    margin-bottom: 5px;
}

.payment-description {
    font-size: 0.9rem;
    color: #666;
}

.text-success {
    color: #28a745 !important;
    font-weight: 500;
}

/* Right side - Order Summary */
.summary-heading {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.items-count {
    color: #666;
    font-size: 0.9rem;
}

.summary-list {
    margin-bottom: 20px;
}

.summary-item {
    display: flex;
    margin-bottom: 15px;
    padding-bottom: 15px;
    border-bottom: 1px solid var(--border-color);
}

.item-image {
    width: 80px;
    height: 80px;
    border-radius: 8px;
    background-color: var(--light-color);
    margin-right: 15px;
    overflow: hidden;
}

.item-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.item-details {
    flex: 1;
}

.item-name {
    font-weight: 500;
    margin-bottom: 5px;
}

.item-price {
    color: var(--accent-color);
    font-weight: 600;
}

.item-quantity {
    color: #666;
    font-size: 0.9rem;
}

/* Coupon Section */
.coupon-section {
    margin: 1.5rem 0;
    padding: 1rem;
    border: 1px solid #E6D7C3;
    border-radius: 8px;
    background-color: #FAFAF5;
}

.section-subtitle {
    font-size: 1.1rem;
    margin-bottom: 1rem;
    color: #654321;
}

.coupon-selection {
    margin-bottom: 1rem;
}

.coupon-select {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #D2B48C;
    border-radius: 4px;
    background-color: white;
    font-size: 0.9rem;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    background-image: url("data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23666%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E");
    background-repeat: no-repeat;
    background-position: right 15px top 50%;
    background-size: 12px auto;
    padding-right: 35px;
}

.coupon-select:focus {
    outline: none;
    border-color: var(--primary-color);
}

.coupon-details {
    margin: 1rem 0;
    font-size: 0.9rem;
}

.coupon-info, .coupon-warning {
    display: flex;
    align-items: flex-start;
    margin-bottom: 0.75rem;
    padding: 0.75rem;
    border-radius: 4px;
    background-color: #F5F5DC;
}

.coupon-warning {
    background-color: #FFF3E0;
    border-left: 3px solid #FF9800;
}

.coupon-info i, .coupon-warning i {
    margin-right: 0.75rem;
    color: #8B7355;
}

.coupon-warning i {
    color: #FF9800;
}

.min-order-message {
    flex: 1;
}

.min-order-message p {
    margin: 0 0 0.5rem 0;
}

.spend-more-text {
    font-weight: 500;
    color: #E65100;
}

.progress-container {
    height: 8px;
    background-color: #EEEEEE;
    border-radius: 4px;
    overflow: hidden;
    margin-top: 0.5rem;
}

.progress-bar {
    height: 100%;
    background-color: #8B7355;
    border-radius: 4px;
    transition: width 0.3s ease;
}

.applied-coupon {
    display: flex;
    align-items: center;
    padding: 0.75rem;
    background-color: #EFF7ED;
    border: 1px solid #A5D6A7;
    border-radius: 4px;
    margin: 1rem 0;
}

.applied-badge {
    display: flex;
    align-items: center;
    font-weight: 500;
    color: #2E7D32;
    margin-right: 0.75rem;
}

.applied-badge i {
    margin-right: 0.5rem;
}

.applied-details {
    flex: 1;
}

.coupon-code {
    font-weight: 500;
    color: #2E7D32;
    margin-right: 0.5rem;
}

.discount-amount {
    font-weight: 500;
    color: #2E7D32;
}

.remove-coupon-btn {
    background: none;
    border: none;
    color: #8B7355;
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.remove-coupon-btn:hover {
    background-color: rgba(139, 115, 85, 0.1);
}

.coupon-actions {
    margin-top: 1rem;
    display: flex;
    justify-content: flex-end;
}

.apply-coupon-btn {
    padding: 0.75rem 1.5rem;
    background-color: #8B7355;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
    transition: background-color 0.2s;
}

.apply-coupon-btn:hover {
    background-color: #654321;
}

.apply-coupon-btn:disabled {
    background-color: #D2B48C;
    cursor: not-allowed;
}

.no-coupons-message {
    display: flex;
    align-items: center;
    padding: 1rem;
    background-color: #F5F5F5;
    border-radius: 4px;
    font-style: italic;
    color: #757575;
}

.no-coupons-message i {
    margin-right: 0.75rem;
    color: #9E9E9E;
}

/* Price Summary */
.price-summary {
    margin-top: 20px;
}

.price-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 12px;
}

.price-label {
    color: #666;
}

.price-value {
    font-weight: 500;
}

.price-discount {
    color: var(--success-color);
    font-weight: 500;
}

.total-row {
    display: flex;
    justify-content: space-between;
    border-top: 1px solid var(--border-color);
    margin-top: 15px;
    padding-top: 15px;
    font-weight: 600;
    font-size: 1.1rem;
}

.total-label {
    color: var(--accent-color);
}

.total-value {
    color: var(--accent-color);
}

/* Place Order Button */
.place-order-btn {
    background-color: var(--accent-color);
    color: white;
    border: none;
    border-radius: 5px;
    padding: 15px;
    font-size: 1rem;
    font-weight: 600;
    width: 100%;
    cursor: pointer;
    margin-top: 20px;
    transition: all 0.3s ease;
}

.place-order-btn:hover {
    background-color: var(--primary-color);
    transform: translateY(-2px);
}

.place-order-btn:active {
    transform: translateY(0);
}

/* Responsiveness */
@media (max-width: 992px) {
    .checkout-container {
        grid-template-columns: 1fr;
    }
}

@media (max-width: 768px) {
    .container {
        padding: 10px;
    }

    .checkout-heading {
        font-size: 2rem;
    }

    .section {
        padding: 20px;
    }
    
    .breadcrumb {
        flex-wrap: wrap;
    }
}

.original-price {
    text-decoration: line-through;
    color: #999;
    font-size: 0.9em;
    margin-right: 5px;
}

.discounted-price {
    font-weight: bold;
    color: #8B7355;
}

.discount-badge {
    background-color: #E6D7C3;
    color: #654321;
    font-size: 0.8em;
    padding: 2px 6px;
    border-radius: 3px;
    margin-left: 5px;
}

.offer-applied {
    color: #8FBC8F;
    font-size: 0.85em;
    margin-top: 3px;
}

.offer-applied i {
    margin-right: 3px;
}

.price-discount {
    color: #8FBC8F;
    font-weight: bold;
}

/* Summary item enhancements */
.summary-item {
    display: flex;
    padding: 15px;
    border-bottom: 1px solid #E6D7C3;
    background-color: #FDFAF5;
    border-radius: 6px;
    margin-bottom: 10px;
    transition: all 0.2s ease;
}

.summary-item:hover {
    box-shadow: 0 2px 8px rgba(139, 115, 85, 0.15);
}

.item-details {
    flex: 1;
    padding-left: 15px;
}

.item-name {
    font-weight: 600;
    margin-bottom: 5px;
    color: #654321;
}

/* Price summary enhancements */
.price-summary {
    background-color: #FDFAF5;
    padding: 15px;
    border-radius: 6px;
    margin-top: 20px;
    border: 1px solid #E6D7C3;
}

.price-row {
    display: flex;
    justify-content: space-between;
    padding: 8px 0;
}

.total-row {
    display: flex;
    justify-content: space-between;
    padding: 12px 0;
    border-top: 2px solid #E6D7C3;
    margin-top: 8px;
    font-weight: bold;
    font-size: 1.1em;
}


    </style>
</head> 

<body>

    <div class="container">
        <!-- Breadcrumb Navigation -->
        <nav class="breadcrumb">
            <div class="breadcrumb-step">
                <div class="step-number completed">
                    <i class="fas fa-check"></i>
                </div>
                <div class="breadcrumb-item">
                    <a href="/cart">Cart</a>
                </div>
            </div>
            <span class="breadcrumb-separator">
                <i class="fas fa-chevron-right"></i>
            </span>
            <div class="breadcrumb-step">
                <div class="step-number active">2</div>
                <div class="breadcrumb-item active">Checkout</div>
            </div>
           
        </nav>

        <h1 class="checkout-heading">Checkout</h1>

        <div class="checkout-container">
            <!-- Left Side - Shipping & Payment -->
            <div class="checkout-left">
                <!-- Shipping Address Section -->
                <div class="section">
                    <h2 class="section-title">Shipping Address</h2>
                    <div class="address-list">
                        <% if (typeof addresses !== 'undefined' && addresses.length > 0) { %>
                            <% addresses.forEach(function(address) { %>
                                <div class="address-card <%= address.isDefault ? 'selected' : '' %>" data-address-id="<%= address._id %>">
                                    <span class="address-type">
                                        <%= address.addressType %>
                                    </span>
                                    <div class="address-details">
                                        <p><strong><%= address.fullName %></strong></p>
                                        <p><%= address.houseNumber %>, <%= address.street %></p>
                                        <p><%= address.landmark %></p>
                                        <p><%= address.city %>, <%= address.state %>, <%= address.pincode %></p>
                                        <% if (address.alternative_no) { %>
                                            <p>Alt. Phone: <%= address.alternative_no %></p>
                                        <% } %>
                                        <% if (address.isDefault) { %>
                                            <button class="address-select">Deliver Here</button>
                                            <span class="default-badge">Default</span>

                                        <% } %>
                                    </div>
                                    <div class="address-actions">
                                        <% if (!address.isDefault) { %>
                                            <button class="address-select">Deliver Here</button>
                                        <% } %>
                                    </div>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <p>No addresses found. Please add a new address.</p>
                        <% } %>
                    </div>
                    <a href="/account/addresses/add?returnUrl=/checkout" class="add-address-btn" style="text-decoration: none;">
                        <i class="fas fa-plus"></i> Add New Address
                    </a>
                </div>

                <!-- Payment Methods Section -->
                <div class="section">
                    <h2 class="section-title">Payment Method</h2>
                    <div class="payment-methods">
                        <div class="payment-option selected">
                            <input type="radio" name="payment" id="cod" value="cod" class="payment-radio" checked>
                            <div class="payment-icon">
                                <i class="fas fa-money-bill-wave"></i>
                            </div>
                            <div class="payment-details">
                                <h4 class="payment-name">Cash on Delivery</h4>
                                <p class="payment-description">Pay when your order arrives</p>
                            </div>
                        </div>

                        <div class="payment-option">
                            <input type="radio" name="payment" id="razorPay" value="razorPay" class="payment-radio" >
                            <div class="payment-icon">
                                <i class="fas fa-credit-card"></i>
                            </div>
                            <div class="payment-details">
                                <h4 class="payment-name">RazorPay</h4>
                                <p class="payment-description">Pay securely with credit/debit card or UPI</p>
                            </div>
                        </div>


                        <div class="payment-option">
                            <input type="radio" name="payment" id="wallet" value="wallet" class="payment-radio" disabled>
                            <div class="payment-icon">
                                <i class="fas fa-wallet"></i>
                            </div>
                            <div class="payment-details">
                                <h4 class="payment-name">Wallet</h4>
                                <p class="payment-description">Use your wallet balance</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right Side - Order Summary -->
            <div class="checkout-right">
                <div class="section">
                    <div class="summary-heading">
                        <h2 class="section-title">Order Summary</h2>
                        <% if (typeof cart !== 'undefined' && cart.books && cart.books.length > 0) { %>
                            <span class="items-count"><%= cart.books.length %> Items</span>
                        <% } else { %>
                            <span class="items-count">0 Items</span>
                        <% } %>
                    </div>

<!-- Add this section in the summary-list div where products are displayed -->
<div class="summary-list">
  <% if (typeof productsWithDiscounts !== 'undefined' && productsWithDiscounts.length > 0) { %>
      <% productsWithDiscounts.forEach(function(item) { %>
          <div class="summary-item" data-product-id="<%= item.product._id %>">
              <div class="item-image">
                  <% if (item.product && item.product.productImages && item.product.productImages.length > 0) { %>
                      <img src="<%= item.product.productImages[0] %>" alt="<%= item.product.name %>">
                  <% } else { %>
                      <img src="/images/placeholder.jpg" alt="Product Image">
                  <% } %>
              </div>
              <div class="item-details">
                  <h4 class="item-name"><%= item.product.name %></h4>
                  
                  <% if (item.appliedOffer) { %>
                      <div class="item-price">
                          <span class="original-price">₹<%= item.originalPrice %></span>
                          <span class="discounted-price">₹<%= item.discountedPrice.toFixed(2) %></span>
                          <span class="discount-badge">
                              <i class="fas fa-tag"></i> <%= item.appliedOffer.discountPercentage %>% OFF
                          </span>
                      </div>
                      <p class="offer-applied">
                          <i class="fas fa-check-circle"></i>
                          <%= item.appliedOffer.offerType === 'product' ? 'Product' : 'Category' %> offer: <%= item.appliedOffer.name %>
                      </p>
                  <% } else { %>
                      <p class="item-price">₹<%= item.originalPrice %></p>
                  <% } %>
                  
                  <p class="item-quantity">Qty: <%= item.quantity %></p>
              </div>
          </div>
      <% }); %>
  <% } else if (typeof cart !== 'undefined' && cart.books && cart.books.length > 0) { %>
      <!-- Fallback to original cart display if productsWithDiscounts is not available -->
      <% cart.books.forEach(function(item) { %>
          <div class="summary-item" data-product-id="<%= item.product._id %>">
              <div class="item-image">
                  <% if (item.product && item.product.productImages && item.product.productImages.length > 0) { %>
                      <img src="<%= item.product.productImages[0] %>" alt="<%= item.product.name %>">
                  <% } else { %>
                      <img src="/images/placeholder.jpg" alt="Product Image">
                  <% } %>
              </div>
              <div class="item-details">
                  <h4 class="item-name"><%= item.product.name %></h4>
                  <p class="item-price">₹<%= item.product.salePrice %></p>
                  <p class="item-quantity">Qty: <%= item.quantity %></p>
              </div>
          </div>
      <% }); %>
  <% } else { %>
      <p>Your cart is empty.</p>
  <% } %>
</div>


<!-- Coupon Section -->
<div class="coupon-section">
    <h3 class="section-subtitle">Apply Coupon</h3>
    
    <% if (activeCoupons && activeCoupons.length > 0) { %>
        <div class="coupon-selection">
            <select id="coupon-select" class="coupon-select">
                <option value="">Select a coupon</option>
                <% activeCoupons.forEach(function(coupon) { %>
                    <option value="<%= coupon.couponCode %>" 
                            data-description="Discount of ₹<%= coupon.offerPrice %>" 
                            data-min="<%= coupon.minAmount %>" 
                            data-discount="<%= coupon.offerPrice %>" 
                            data-type="fixed"
                            data-expire="<%= coupon.expireDate %>">
                        <%= coupon.couponCode %> - ₹<%= coupon.offerPrice %> off
                    </option>
                <% }); %>
            </select>
        </div>
        
        <!-- Coupon Details -->
        <div class="coupon-details">
            <div id="coupon-description" class="coupon-info">
                Select a coupon to see details
            </div>
            
            <!-- Eligibility Message - This is what we're enhancing -->
            <div id="coupon-eligibility" class="coupon-warning" style="display: none;">
                <i class="fas fa-exclamation-circle"></i>
                <div class="min-order-message">
                    <p>Minimum order value: ₹<span id="min-amount"></span></p>
                    <p class="spend-more-text">
                        Add ₹<span id="remaining-amount"></span> more to apply this coupon
                    </p>
                    <div class="progress-container">
                        <div class="progress-bar" id="eligibility-progress"></div>
                    </div>
                </div>
            </div>
            
            <!-- Expiry Information -->
            <div id="coupon-expiry" class="coupon-info" style="display: none;">
                <i class="fas fa-clock"></i>
                <p>Valid until: <span id="expire-date"></span></p>
            </div>
        </div>
        
        <!-- Applied Coupon Section -->
        <div id="applied-coupon" class="applied-coupon" style="display: none;">
            <div class="applied-badge">
                <i class="fas fa-tag"></i> Applied:
            </div>
            <div class="applied-details">
                <span id="applied-coupon-name" class="coupon-code"></span>
                <span id="applied-coupon-discount" class="discount-amount"></span>
            </div>
            <button id="remove-coupon-btn" class="remove-coupon-btn">
                <i class="fas fa-times"></i>
            </button>
        </div>
    <% } else { %>
        <div class="no-coupons-message">
            <i class="fas fa-ticket-alt"></i>
            <p>No coupons available at the moment</p>
        </div>
    <% } %>
    
    <div class="coupon-actions">
        <button id="apply-coupon-btn" class="apply-coupon-btn" <%= !activeCoupons || activeCoupons.length === 0 ? 'disabled' : '' %>>
            Apply Coupon
        </button>
    </div>
</div>

<!-- Update the price summary section to include offer discounts -->
<div class="price-summary">
  <div class="price-row">
      <span class="price-label">Original subtotal</span>
      <span class="price-value">₹<%= typeof originalSubtotal !== 'undefined' ? originalSubtotal : subtotal %></span>
  </div>
  
  <% if (typeof totalOfferDiscount !== 'undefined' && totalOfferDiscount > 0) { %>
  <div class="price-row">
      <span class="price-label">Offer discounts</span>
      <span class="price-discount">-₹<%= totalOfferDiscount %></span>
  </div>
  <% } %>
  
  <div class="price-row">
      <span class="price-label">Subtotal after offers</span>
      <span class="price-value">₹<%= typeof subtotal !== 'undefined' ? subtotal : 0 %></span>
  </div>
  
  <div class="price-row">
      <span class="price-label">GST (18%)</span>
      <span class="price-value">₹<%= typeof gstAmount !== 'undefined' ? gstAmount : 0 %></span>
  </div>
  
  <div class="price-row">
      <span class="price-label">Shipping</span>
      <span class="<%= shippingCost == 0 ? 'text-success' : 'price-value' %>">
          <%= shippingCost == 0 ? 'FREE' : '₹' + shippingCost %>                          
      </span>  
  </div>
  
  <div id="discount-row" class="price-row" style="display: none;">
      <span class="price-label">Coupon discount</span>
      <span id="discount-value" class="price-discount">-₹0</span>
  </div>
  
  <div class="total-row">
      <span class="total-label">Total</span>
      <span id="total-value" class="total-value">₹<%= typeof totalPrice !== 'undefined' ? totalPrice : 0 %></span>
  </div>
</div>

                    <button class="place-order-btn">Place Order</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
// Custom SweetAlert theme configuration
const themeColors = {
  primary: '#8B7355',
  secondary: '#D2B48C',
  light: '#F5F5DC',
  border: '#E6D7C3',
  accent: '#654321',
  error: '#CD5C5C',
  success: '#8FBC8F'
};

const Toast = Swal.mixin({
  toast: true,
  position: 'top-end',
  showConfirmButton: false,
  timer: 3000,
  timerProgressBar: true,
  didOpen: (toast) => {
    toast.addEventListener('mouseenter', Swal.stopTimer);
    toast.addEventListener('mouseleave', Swal.resumeTimer);
  }
});

document.addEventListener('DOMContentLoaded', function() {
  initializeAddressSelection();
  initializePaymentSelection();
  initializeOrderPlacement();
  initializeCouponFunctionality();
  initializeOfferDiscountDisplay();
  checkCODEligibility();
  setTimeout(checkCODEligibility, 500);
});

// Address selection functionality
function initializeAddressSelection() {
  document.querySelectorAll('.address-select').forEach(button => {
    button.addEventListener('click', function() {
      document.querySelectorAll('.address-card').forEach(card => {
        card.classList.remove('selected');
      });
      this.closest('.address-card').classList.add('selected');
    });
  });
}

// New function to check COD eligibility based on order total
function checkCODEligibility() {
  const COD_LIMIT = 1000; // Define the COD limit as Rs 1000
  
  // Get the current total value
  const totalValueElem = document.getElementById('total-value');
  const currentTotal = totalValueElem ? parseFloat(totalValueElem.textContent.replace('₹', '')) : 0;
  
  // Get the COD payment option
  const codOption = document.querySelector('.payment-option input[value="cod"]');
  
  if (codOption) {
    const codPaymentOption = codOption.closest('.payment-option');
    
    // If total is above limit, disable COD
    if (currentTotal > COD_LIMIT) {
      // Disable the radio button
      codOption.disabled = true;
      
      // Add visual indication that COD is disabled
      codPaymentOption.classList.add('disabled');
      
      // Add a message explaining why COD is disabled
      const messageElem = document.createElement('p');
      messageElem.className = 'payment-restriction';
      messageElem.innerHTML = '<i class="fas fa-info-circle"></i> Not available for orders above ₹1000';
      
      // Find the payment details div to append the message
      const detailsDiv = codPaymentOption.querySelector('.payment-details');
      if (detailsDiv && !detailsDiv.querySelector('.payment-restriction')) {
        detailsDiv.appendChild(messageElem);
      }
      
      // If COD is currently selected, switch to another payment method
      if (codPaymentOption.classList.contains('selected')) {
        // Deselect COD
        codPaymentOption.classList.remove('selected');
        codOption.checked = false;
        
        // Select the first available payment method (likely Razorpay)
        const firstAvailablePayment = document.querySelector('.payment-option input:not([disabled])');
        if (firstAvailablePayment) {
          const paymentOption = firstAvailablePayment.closest('.payment-option');
          paymentOption.classList.add('selected');
          firstAvailablePayment.checked = true;
          
          // Show notification to user
          Toast.fire({
            icon: 'info',
            title: 'Cash on Delivery is not available for orders above ₹1000',
            text: 'We\'ve selected an online payment method for you.',
            background: themeColors.light
          });
        }
      }
    } else {
      // Enable COD if total is below limit
      codOption.disabled = false;
      codPaymentOption.classList.remove('disabled');
      
      // Remove any restriction message if it exists
      const restrictionMsg = codPaymentOption.querySelector('.payment-restriction');
      if (restrictionMsg) {
        restrictionMsg.remove();
      }
    }
  }
}


// Payment method selection functionality
function initializePaymentSelection() {
  document.querySelectorAll('.payment-option').forEach(option => {
    option.addEventListener('click', function() {
      if (this.querySelector('input[type="radio"]').disabled) return;
      
      document.querySelectorAll('.payment-option').forEach(opt => {
        opt.classList.remove('selected');
      });
      this.classList.add('selected');
      this.querySelector('input[type="radio"]').checked = true;
    });
  });
}


// Add CSS styles for disabled payment options
const style = document.createElement('style');
style.textContent = `
  .payment-option.disabled {
    opacity: 0.7;
    background-color: #f5f5f5;
    cursor: not-allowed;
  }
  
  .payment-restriction {
    color: #CD5C5C;
    font-size: 0.85rem;
    margin-top: 5px;
  }
  
  .payment-restriction i {
    margin-right: 4px;
  }
`;
document.head.appendChild(style);


// Order placement logic
function initializeOrderPlacement() {
  const placeOrderBtn = document.querySelector('.place-order-btn');
  if (!placeOrderBtn) return;
  
  placeOrderBtn.addEventListener('click', function() {
    // Validate selections
    const selectedAddress = document.querySelector('.address-card.selected');
    if (!selectedAddress) {
      showAlert('warning', 'Missing Address', 'Please select a delivery address');
      return;
    }
    
    const selectedPayment = document.querySelector('.payment-option.selected input[type="radio"]').value;
    
    // Get the updated subtotal after offers
    let subtotal = 0;
    document.querySelectorAll('.price-row').forEach(row => {
      const label = row.querySelector('.price-label');
      if (label && label.textContent.trim() === 'Subtotal after offers') {
        const valueElem = row.querySelector('.price-value');
        if (valueElem) {
          subtotal = parseFloat(valueElem.textContent.replace('₹', '')) || 0;
        }
      }
    });


    // Collect product details
    const productDetails = collectProductDetails();
    
    // Show confirmation dialog
    confirmOrderPlacement(selectedAddress.dataset.addressId, selectedPayment, subtotal, productDetails);
  });
}



function collectProductDetails() {
  const productDetails = [];
  document.querySelectorAll('.summary-item').forEach(item => {
    const productId = item.getAttribute('data-product-id');
    const quantityText = item.querySelector('.item-quantity').textContent;
    const quantity = parseInt(quantityText.replace('Qty: ', ''));
    
    // Check if this product has a discount applied
    const originalPriceElem = item.querySelector('.original-price');
    const discountedPriceElem = item.querySelector('.discounted-price');
    const nameElem = item.querySelector('.item-name');
    
    if (productId && quantity) {
      const productDetail = {
        productId: productId,
        quantity: quantity,
        name: nameElem ? nameElem.textContent : 'Product'
      };
      
      // If there's an offer applied, collect that information
      if (originalPriceElem && discountedPriceElem) {
        const originalPrice = parseFloat(originalPriceElem.textContent.replace('₹', ''));
        const discountedPrice = parseFloat(discountedPriceElem.textContent.replace('₹', ''));
        
        productDetail.originalPrice = originalPrice;
        productDetail.discountedPrice = discountedPrice.toFixed(2);
        productDetail.hasOffer = true;
      } else {
        // Get price for products without offers
        const priceElem = item.querySelector('.item-price');
        if (priceElem) {
          const price = parseFloat(priceElem.textContent.replace('₹', '')) || 0;
          productDetail.price = price;
          // Even for products without special offers, include the price as discountedPrice
          productDetail.discountedPrice = price.toFixed(2);
        }
      }
      
      productDetails.push(productDetail);
    }
  });
  return productDetails;
}



function confirmOrderPlacement(addressId, paymentMethod, subtotal, products) {
  Swal.fire({
    title: 'Confirm Order',
    text: 'Are you sure you want to place this order?',
    icon: 'question',
    showCancelButton: true,
    confirmButtonColor: themeColors.accent,
    cancelButtonColor: themeColors.secondary,
    confirmButtonText: 'Yes, place order!',
    background: themeColors.light
  }).then((result) => {
    if (result.isConfirmed) {
      placeOrder(addressId, paymentMethod, subtotal, products);
    }
  });
}



function placeOrder(addressId, paymentMethod, subtotal, products) {
  // Get currently applied coupon information if any
  const appliedCouponElem = document.getElementById('applied-coupon');
  const appliedCouponNameElem = document.getElementById('applied-coupon-name');
  
  // Get updated total value directly from the UI
  const totalValueElem = document.getElementById('total-value');
  const currentTotal = totalValueElem ? parseFloat(totalValueElem.textContent.replace('₹', '')) : 0;
  
  let gstAmount = 0;
  let shippingCost = 0;
  
  document.querySelectorAll('.price-row').forEach(row => {
    const label = row.querySelector('.price-label');
    if (label) {
      const labelText = label.textContent.trim();
      if (labelText === 'GST (18%)') {
        const valueElem = row.querySelector('.price-value');
        gstAmount = valueElem ? parseFloat(valueElem.textContent.replace('₹', '')) || 0 : 0;
      } else if (labelText === 'Shipping') {
        const valueElem = row.querySelector('.price-value, .text-success');
        const valueText = valueElem ? valueElem.textContent.trim() : 'FREE';
        shippingCost = valueText === 'FREE' ? 0 : parseFloat(valueText.replace('₹', '')) || 0;
      }
    }
  });
  

  // Prepare product data in the exact format expected by backend
  const orderProducts = products.map(item => {
    return {
      productId: item.productId,
      quantity: item.quantity,
      discountedPrice: item.discountedPrice 
    };
  });
  
  // Create order details object - match exactly what backend expects
  const orderDetails = {
    addressId: addressId,
    paymentMethod: paymentMethod,
    subtotal: subtotal,
    gstAmount: gstAmount || 0,
    shippingCost: shippingCost || 0,
    totalAmount: currentTotal,
    products: orderProducts
  };
  
  // Add coupon details if a coupon is applied
  if (appliedCouponElem && 
      appliedCouponElem.style.display !== 'none' && 
      appliedCouponNameElem && 
      appliedCouponNameElem.textContent.trim() !== '') {
    
    const couponCode = appliedCouponNameElem.textContent.trim();
    const discountElem = document.getElementById('applied-coupon-discount');
    let couponDiscount = 0;
    
    // Get discount value
    if (discountElem) {
      couponDiscount = parseFloat(discountElem.textContent.replace('-₹', '')) || 0;
    } else {
      const discountValueElem = document.getElementById('discount-value');
      couponDiscount = discountValueElem ? parseFloat(discountValueElem.textContent.replace('-₹', '')) || 0 : 0;
    }
    
    // Add coupon information to order details
    orderDetails.coupon = {
      couponCode: couponCode,
      discount: couponDiscount
    };
  }

  console.log(orderDetails);
  
  // Handle different payment methods
  if (paymentMethod === 'razorPay') {
    // For Razorpay, first create an order on the server
    showLoadingSpinner('Processing Payment', 'Setting up payment gateway...');
    
    // Create order on server first to get Razorpay order ID
    fetch('/api/create-razorpay-order', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        amount: currentTotal,
        orderDetails: orderDetails
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        Swal.close(); // Close the loading spinner
        
        // Extract customer details for pre-filling
        const selectedAddress = document.querySelector('.address-card.selected');
        let customerName = '';
        let customerEmail = '';
        let customerPhone = '';
        
        if (selectedAddress) {
          const nameElement = selectedAddress.querySelector('strong');
          if (nameElement) {
            customerName = nameElement.textContent.trim();
          }
          
          // Try to find phone and email if available in the address
          const addressText = selectedAddress.textContent;
          const phoneMatch = addressText.match(/\d{10}/);
          if (phoneMatch) {
            customerPhone = phoneMatch[0];
          }
        }
        
        // Launch Razorpay checkout
        const options = {
          key: 'rzp_test_aCX7D7quXrAK1v', // your test key
          amount: data.order.amount, // Amount from the server
          currency: data.order.currency,
          name: 'Your Bookstore',
          description: 'Book Purchase',
          order_id: data.order.id,
          handler: function(response) {
            // Handle successful payment
            handleRazorpaySuccess(response, orderDetails);
          },
          prefill: {
            name: customerName,
            email: customerEmail,
            contact: customerPhone
          },
          notes: {
            address: 'Your Bookstore Address'
          },
          theme: {
            color: themeColors.primary
          },
          modal: {
            ondismiss: function() {
              // Handle dismissal
              Toast.fire({
                icon: 'info',
                title: 'Payment canceled',
                background: themeColors.light
              });
            }
          }
        };
        
        const razorpay = new Razorpay(options);
        razorpay.on('payment.failed', function(response) {
          handleRazorpayFailure(response);
        });
        razorpay.open();
        
      } else {
        showAlert('error', 'Order Failed', data.message || 'Could not create payment order');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      showAlert('error', 'Oops...', 'Something went wrong while setting up payment');
    });
  } else {
    // For COD and other payment methods, proceed with regular order placement
    showLoadingSpinner('Processing Order', 'Please wait while we process your order...');
    
    fetch('/place-order', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(orderDetails)
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        showAlert('success', 'Order Placed!', 'Your order has been placed successfully.')
          .then(() => {
            window.location.href = `/order-placed/${data.orderId}`;
          });
      } else {
        showAlert('error', 'Order Failed', data.message || 'Please try again');
      } 
    })
    .catch(error => {
      console.error('Error:', error);
      showAlert('error', 'Oops...', 'Something went wrong');
    });
  }
}



function handleRazorpaySuccess(response, orderDetails) {
  // Show loading state
  showLoadingSpinner('Verifying Payment', 'Please wait while we confirm your payment...');
  
  // Send the payment details to your server for verification
  fetch('/api/verify-razorpay-payment', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      paymentId: response.razorpay_payment_id,
      orderId: response.razorpay_order_id,
      signature: response.razorpay_signature,
      orderDetails: orderDetails
    })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      // Show success message and redirect to order confirmation page
      showAlert('success', 'Payment Successful!', 'Your order has been placed successfully.')
        .then(() => {
          window.location.href = `/order-placed/${data.orderId}`;
        });
    } else {
      // Handle payment verification failure
      showAlert('error', 'Payment Verification Failed', data.message || 'Your payment could not be verified');
    }
  })
  .catch(error => {
    console.error('Error verifying payment:', error);
    showAlert('error', 'Verification Error', 'There was a problem verifying your payment');
  });
}


// Function to handle Razorpay payment failure
function handleRazorpayFailure(response) {  
  let errorMessage = 'Your payment failed.';
  
  // Map common error codes to user-friendly messages
  switch (response.error.code) {
    case 'BAD_REQUEST_ERROR':
      errorMessage = 'The payment request was invalid. Please try again.';
      break;
    case 'GATEWAY_ERROR':
      errorMessage = 'There was an issue with the payment gateway. Please try again in a few minutes.';
      break;
    case 'SERVER_ERROR':
      errorMessage = 'Our server encountered an error. Please try again later.';
      break;
    default:
      errorMessage = `Payment failed: ${response.error.description}`;
  }
  
  // Redirect to the payment failed page with error details
  const orderId = response.error.metadata ? response.error.metadata.order_id : '';
  const amount = document.getElementById('total-value') ? 
    document.getElementById('total-value').textContent.replace('₹', '') : '';
  
  // Construct URL with query parameters
  const redirectUrl = `/payment-failed?error_code=${encodeURIComponent(response.error.code)}&error_description=${encodeURIComponent(errorMessage)}&order_id=${encodeURIComponent(orderId)}&amount=${encodeURIComponent(amount)}`;
  
  // Redirect the user to payment failed page
  window.location.href = redirectUrl;
}


function initializeCouponFunctionality() {
  // Initialize coupon variables
  let appliedCoupon = getAppliedCouponFromPage();
  
  const elements = {
    couponSelect: document.getElementById('coupon-select'),
    applyButton: document.getElementById('apply-coupon-btn'),
    removeButton: document.getElementById('remove-coupon-btn'),
    discountRow: document.getElementById('discount-row'),
    discountValue: document.getElementById('discount-value'),
    totalValue: document.getElementById('total-value'),
    appliedCouponElem: document.getElementById('applied-coupon'),
    appliedCouponNameElem: document.getElementById('applied-coupon-name'),
    appliedCouponDiscountElem: document.getElementById('applied-coupon-discount') // Fixed: Added this line
  };
  
  let subtotal = 0;
  document.querySelectorAll('.price-row').forEach(row => {
    const label = row.querySelector('.price-label');
    if (label && label.textContent.trim() === 'Subtotal after offers') {
      const valueElem = row.querySelector('.price-value');
      if (valueElem) {
        subtotal = parseFloat(valueElem.textContent.replace('₹', '')) || 0;
      }
    }
  });
  
  // Initialize UI based on existing applied coupon
  if (appliedCoupon) {
    updateAppliedCouponUI(appliedCoupon, elements);
  }
  
  if (elements.couponSelect) {
    elements.couponSelect.addEventListener('change', function() {
      const selectedOption = this.options[this.selectedIndex];
      updateCouponDetails(selectedOption, subtotal);
    });
  }
  
  if (elements.applyButton) {
    elements.applyButton.addEventListener('click', function() {
      const selectedOption = elements.couponSelect ? 
        elements.couponSelect.options[elements.couponSelect.selectedIndex] : null;
      
      if (!selectedOption || selectedOption.value === '') {
        Toast.fire({
          icon: 'warning',
          title: 'Please select a coupon first',
          background: themeColors.light
        });
        return;
      }
      
      const minOrderValue = parseFloat(selectedOption.dataset.min) || 0;
      if (subtotal < minOrderValue) {
        showAlert('warning', 'Cannot Apply Coupon', 
          `Your order total needs to be at least ₹${minOrderValue} to apply this coupon`);
        return;
      }
      
      const couponCode = selectedOption.value;
      
      showLoadingSpinner('Applying Coupon', 'Please wait...');
      
      applyCoupon(couponCode, subtotal, elements);
    });
  }
  
  if (elements.removeButton) {
    elements.removeButton.addEventListener('click', function() {
      showLoadingSpinner('Removing Coupon', 'Please wait...');
      
      // Get the coupon code that's currently applied
      const couponCode = elements.appliedCouponNameElem ? 
        elements.appliedCouponNameElem.textContent.trim() : '';
      
      // Only proceed if there's actually a coupon applied
      if (!couponCode) {
        Swal.close();
        return;
      }
      
      fetch('/api/remove-coupon', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          subtotal: subtotal,
          couponCode: couponCode // Send the coupon code being removed
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Reset coupon UI completely
          resetCouponUI(elements);
          
          // Update price summary with new data
          updatePriceSummaryAfterCouponRemoval(data);
          
          Toast.fire({
            icon: 'success',
            title: 'Coupon removed successfully',
            background: themeColors.light,
            iconColor: themeColors.success
          });
        } else {
          showAlert('error', 'Error', 
            data.message || 'Could not remove coupon');
        }
      })
      .catch(error => {
        console.error('Error removing coupon:', error);
        showAlert('error', 'Oops...', 
          'Error removing coupon. Please try again.');
      });
    });
  }
}

function getAppliedCouponFromPage() {
  const appliedCouponElem = document.getElementById('applied-coupon');
  const appliedCouponNameElem = document.getElementById('applied-coupon-name');
  
  if (appliedCouponElem && 
      appliedCouponElem.style.display !== 'none' && 
      appliedCouponNameElem && 
      appliedCouponNameElem.textContent.trim() !== '') {
      
    const couponName = appliedCouponNameElem.textContent.trim();
    const discountElem = document.getElementById('applied-coupon-discount');
    const discountText = discountElem ? discountElem.textContent.trim() : '';
    const discountValue = discountText ? parseFloat(discountText.replace('-₹', '')) : 0;
    
    return {
      couponCode: couponName,
      offerPrice: discountValue
    };
  }
  
  return null;
}

function updateCouponDetails(selectedOption, subtotal) {
  if (!selectedOption) return;
  
  const couponDescription = document.getElementById('coupon-description');
  const couponEligibility = document.getElementById('coupon-eligibility');
  const couponExpiry = document.getElementById('coupon-expiry');
  const expireDate = document.getElementById('expire-date');
  const minAmount = document.getElementById('min-amount');
  const remainingAmount = document.getElementById('remaining-amount');
  const eligibilityProgress = document.getElementById('eligibility-progress');
  const applyButton = document.getElementById('apply-coupon-btn');
  
  if (selectedOption.value !== '') {
    if (couponDescription) {
      couponDescription.textContent = selectedOption.dataset.description || 'No description available';
    }
    
    // Check coupon expiry
    if (selectedOption.dataset.expire && couponExpiry && expireDate) {
      const expiryDate = new Date(selectedOption.dataset.expire);
      const formattedDate = expiryDate.toLocaleDateString();
      expireDate.textContent = formattedDate;
      couponExpiry.style.display = 'block';
    } else if (couponExpiry) {
      couponExpiry.style.display = 'none';
    }
    
    // Check eligibility - use the correct subtotal (after product offers)
    const minOrderValue = parseFloat(selectedOption.dataset.min) || 0;
    if (minAmount) minAmount.textContent = minOrderValue.toFixed(2);
    
    if (subtotal < minOrderValue) {
      const remaining = (minOrderValue - subtotal).toFixed(2);
      if (remainingAmount) remainingAmount.textContent = remaining;
      
      // Update progress bar
      if (eligibilityProgress) {
        const progressPercentage = Math.min(100, (subtotal / minOrderValue) * 100);
        eligibilityProgress.style.width = `${progressPercentage}%`;
      }
      
      if (couponEligibility) couponEligibility.style.display = 'flex';
      if (applyButton) applyButton.disabled = true;
    } else {
      if (couponEligibility) couponEligibility.style.display = 'none';
      if (applyButton) applyButton.disabled = false;
    }
  } else {
    if (couponDescription) couponDescription.textContent = 'Select a coupon to see details';
    if (couponEligibility) couponEligibility.style.display = 'none';
    if (couponExpiry) couponExpiry.style.display = 'none';
    if (applyButton) applyButton.disabled = false;
  }
}

function applyCoupon(couponCode, subtotal, elements) {
  fetch('/api/apply-coupon', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ 
      couponCode: couponCode,
      subtotal: subtotal,
      isPostOfferSubtotal: true 
    })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      // Save the applied coupon - use the actual discount from the response
      const appliedCoupon = {
        couponCode: couponCode,
        offerPrice: data.coupon.discount
      };
      
      // Update UI with the discount value from the server
      updateAppliedCouponUI(appliedCoupon, elements, data.coupon.discount);
      
      // Update all price components with data from the response
      updatePriceSummary(data);
      
      checkCODEligibility();
      
      // Success notification
      showAlert('success', 'Coupon Applied', 
        `Coupon ${couponCode} has been applied successfully!`);

    } else {
      // Enhanced error handling
      const friendlyErrorMessage = handleCouponValidationErrors(data.message);
      
      showAlert('error', 'Coupon Error', friendlyErrorMessage);
      
      // Reset the coupon selector if it was an error
      resetCouponSelectorOnError(elements);
    }
  })
  .catch(error => {
    console.error('Error:', error);
    showAlert('error', 'Oops...', 
      'Error applying coupon. Please try again.');
  });
}

function handleCouponValidationErrors(errorMessage) {
  // Common validation error messages to check for
  const validationMessages = {
    'already used': 'You have already used this coupon',
    'not available': 'This coupon is not available for your account',
    'expired': 'This coupon has expired',
    'not active': 'This coupon is not active yet',
    'minimum order': 'The minimum order amount requirement has not been met'
  };

  // Check if the error matches any known validation issues
  for (const [key, message] of Object.entries(validationMessages)) {
    if (errorMessage.toLowerCase().includes(key)) {
      return message;
    }
  }

  // Default error message if no specific validation issue is identified
  return errorMessage || 'Please try another coupon code';
}

function resetCouponSelectorOnError(elements) {
  if (!elements.couponSelect) return;
  
  elements.couponSelect.selectedIndex = 0;
  
  // Reset coupon details UI
  const couponDescription = document.getElementById('coupon-description');
  const couponEligibility = document.getElementById('coupon-eligibility');
  const couponExpiry = document.getElementById('coupon-expiry');
  
  if (couponDescription) {
    couponDescription.textContent = 'Select a coupon to see details';
  }
  if (couponEligibility) {
    couponEligibility.style.display = 'none';
  }
  if (couponExpiry) {
    couponExpiry.style.display = 'none';
  }
}

function updatePriceSummary(data) {
  // Update GST value
  const gstElement = document.querySelector('.price-row:nth-child(4) .price-value');
  if (gstElement && data.gstAmount !== undefined) {
    gstElement.textContent = `₹${data.gstAmount}`;
  }
  
  // Update shipping cost
  const shippingElement = document.querySelector('.price-row:nth-child(5) .price-value');
  if (shippingElement && data.shippingCost !== undefined) {
    if (data.shippingCost === 0) {
      shippingElement.textContent = 'FREE';
      shippingElement.className = 'text-success';
    } else {
      shippingElement.textContent = `₹${data.shippingCost}`;
      shippingElement.className = 'price-value';
    }
  }
  
  // Display coupon discount row
  const discountRow = document.getElementById('discount-row');
  const discountValue = document.getElementById('discount-value');
  if (discountRow && discountValue && data.coupon && data.coupon.discount) {
    discountRow.style.display = 'flex';
    discountValue.textContent = `-₹${data.coupon.discount}`;
  }
  
  // Update total with the new total from the server
  const totalElement = document.getElementById('total-value');
  if (totalElement && data.updatedTotal !== undefined) {
    totalElement.textContent = `₹${data.updatedTotal}`;
  }
  checkCODEligibility();
}

function updatePriceSummaryAfterCouponRemoval(data) {
  // Hide coupon discount row
  const discountRow = document.getElementById('discount-row');
  if (discountRow) {
    discountRow.style.display = 'none';
  }
  
  // Update total with the new total from the server
  const totalElement = document.getElementById('total-value');
  if (totalElement && data.updatedTotal !== undefined) {
    totalElement.textContent = `₹${data.updatedTotal.toFixed(2)}`;
  }
  
  // Update GST if provided
  const gstElement = document.querySelector('.price-row:nth-child(4) .price-value');
  if (gstElement && data.gstAmount !== undefined) {
    gstElement.textContent = `₹${data.gstAmount.toFixed(2)}`;
  }
  
  // Update shipping if provided
  const shippingElement = document.querySelector('.price-row:nth-child(5) .price-value');
  if (shippingElement && data.shippingCost !== undefined) {
    if (data.shippingCost === 0) {
      shippingElement.textContent = 'FREE';
      shippingElement.className = 'text-success';
    } else {
      shippingElement.textContent = `₹${data.shippingCost.toFixed(2)}`;
      shippingElement.className = 'price-value';
    }
  }
  checkCODEligibility();
}

function updateAppliedCouponUI(coupon, elements, discount) {
  if (!coupon) return;
  
  const { appliedCouponElem, appliedCouponNameElem, discountRow, discountValue } = elements;
  
  if (appliedCouponElem && appliedCouponNameElem) {
    appliedCouponNameElem.textContent = coupon.couponCode || '';
    
    const discountElem = document.getElementById('applied-coupon-discount');
    if (discountElem) {
      discountElem.textContent = `-₹${discount || coupon.offerPrice || 0}`;
    }
    
    // Show the applied coupon section
    appliedCouponElem.style.display = 'flex';
  }
  
  // Show discount in price summary
  if (discountRow && discountValue) {
    discountRow.style.display = 'flex';
    discountValue.textContent = `-₹${discount || coupon.offerPrice || 0}`;
  }
}

function resetCouponUI(elements) {
  const { 
    appliedCouponElem, 
    discountRow, 
    couponSelect, 
    appliedCouponNameElem, 
    appliedCouponDiscountElem 
  } = elements;
  
  // Hide the applied coupon section
  if (appliedCouponElem) {
    appliedCouponElem.style.display = 'none';
  }
  
  // Clear the applied coupon name and discount
  if (appliedCouponNameElem) {
    appliedCouponNameElem.textContent = '';
  }
  
  if (appliedCouponDiscountElem) {
    appliedCouponDiscountElem.textContent = '';
  }
  
  // Hide the discount row in price summary
  if (discountRow) {
    discountRow.style.display = 'none';
  }
  
  // Reset the coupon select dropdown
  if (couponSelect) {
    couponSelect.selectedIndex = 0;
  }
  
  // Reset descriptions and eligibility displays
  const couponDescription = document.getElementById('coupon-description');
  const couponEligibility = document.getElementById('coupon-eligibility');
  const couponExpiry = document.getElementById('coupon-expiry');
  
  if (couponDescription) {
    couponDescription.textContent = 'Select a coupon to see details';
  }
  
  if (couponEligibility) {
    couponEligibility.style.display = 'none';
  }
  
  if (couponExpiry) {
    couponExpiry.style.display = 'none';
  }
  
  // Re-enable apply button if it was disabled
  const applyButton = document.getElementById('apply-coupon-btn');
  if (applyButton) {
    applyButton.disabled = false;
  }
}


function initializeOfferDiscountDisplay() {
  // Format prices to show only 2 decimal places
  document.querySelectorAll('.discounted-price').forEach(el => {
    const price = parseFloat(el.textContent.replace('₹', ''));
    el.textContent = `₹${price.toFixed(2)}`;
  });
  
  // Add tooltip hover effects for offer details
  document.querySelectorAll('.offer-applied').forEach(el => {
    el.setAttribute('title', 'This discount is automatically applied');
    el.style.cursor = 'help';
  });
}

// Helper functions
function showAlert(icon, title, text = '') {
  return Swal.fire({
    icon: icon,
    title: title,
    text: text,
    confirmButtonColor: icon === 'success' ? themeColors.success : themeColors.primary,
    background: themeColors.light
  });
}

function showLoadingSpinner(title, text = '') {
  return Swal.fire({
    title: title,
    text: text,
    allowOutsideClick: false,
    didOpen: () => {
      Swal.showLoading();
    },
    background: themeColors.light
  });
} </script>

</body>

</html>