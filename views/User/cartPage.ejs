<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
    <title>ChapterOne | Shopping Cart</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.12/dist/sweetalert2.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.12/dist/sweetalert2.all.min.js"></script>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <!-- Google Fonts - Playfair Display & Montserrat -->
    <link
        href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700&family=Montserrat:wght@300;400;500;600&display=swap"
        rel="stylesheet">

    <style>
        /* Offer Badge and Price Styling */
.price-container {
    position: relative;
    display: flex;
    align-items: center;
    margin-bottom: 5px;
}

.discounted-price {
    font-weight: bold;
    color: #e63946;
    margin-right: 10px;
}

.original-price {
    text-decoration: line-through;
    color: #6c757d;
    font-size: 0.9em;
}

.offer-badge {
    background-color: #e63946;
    color: white;
    padding: 2px 8px;
    border-radius: 4px;
    font-size: 0.8em;
    font-weight: bold;
    margin-left: 10px;
}

/* Add this to your recommended books section as well */
.book-card {
    position: relative;
}

.book-card .offer-badge {
    position: absolute;
    top: 10px;
    right: 10px;
    z-index: 2;
}

.book-card .price-container {
    display: flex;
    align-items: center;
    margin-bottom: 5px;
}
        :root {
            --primary-brown: #8B5A2B;
            --secondary-brown: #A67C52;
            --light-brown: #D2B48C;
            --cream: #F5F5DC;
            --off-white: #FAF9F6;
        }

        body {
            font-family: 'Montserrat', sans-serif;
            background-color: #f8f9fa;
            color: #333;
        }

        .cart-hero-section {
            background: linear-gradient(135deg, var(--light-brown) 0%, var(--secondary-brown) 100%);
            padding: 4rem 0;
            margin-bottom: 2.5rem;
            text-align: center;
            color: white;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            position: relative;
            overflow: hidden;
        }

        .cart-hero-section::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='rgba(255,255,255,0.1)' fill-rule='evenodd'/%3E%3C/svg%3E") repeat;
            opacity: 0.3;
        }

        .cart-hero-section h1 {
            font-family: 'Playfair Display', serif;
            font-size: 3rem;
            font-weight: 700;
            margin-bottom: 1rem;
            text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.2);
            letter-spacing: 1px;
        }

        .cart-hero-section p {
            font-size: 1.2rem;
            font-weight: 300;
            max-width: 600px;
            margin: 0 auto;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);
        }

        .cart-container {
            background-color: var(--off-white);
            border-radius: 12px;
            padding: 2.5rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
            margin-bottom: 3rem;
            position: relative;
        }

        .section-title {
            font-family: 'Playfair Display', serif;
            color: var(--primary-brown);
            font-weight: 600;
            position: relative;
            display: inline-block;
            margin-bottom: 1.5rem;
        }

        .section-title::after {
            content: "";
            position: absolute;
            bottom: -8px;
            left: 0;
            width: 60px;
            height: 3px;
            background: var(--secondary-brown);
        }

        .cart-item {
            background-color: white;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
            transition: all 0.3s ease;
            display: flex;
            position: relative;
        }

        .cart-item:hover {
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            transform: translateY(-5px);
        }

        .cart-item-img {
            width: 120px;
            min-width: 120px;
            height: auto;
            max-height: 160px;
            object-fit: contain;
            margin-right: 1.5rem;
            transition: all 0.5s ease;
        }

        .cart-item:hover .cart-item-img {
            transform: scale(1.05);
        }

        .cart-item-details {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .cart-item-title {
            font-family: 'Playfair Display', serif;
            font-weight: 600;
            font-size: 1.25rem;
            margin-bottom: 0.5rem;
            color: #333;
        }

        .cart-item-author {
            color: #666;
            font-size: 0.9rem;
            font-weight: 500;
            margin-bottom: 0.75rem;
        }

        .cart-item-price {
            font-weight: 700;
            color: var(--primary-brown);
            font-size: 1.2rem;
            margin-bottom: 0.75rem;
        }

        .cart-item-quantity {
            display: flex;
            align-items: center;
            margin-bottom: 0.75rem;
        }

        .quantity-btn {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: var(--cream);
            border: none;
            cursor: pointer;
            color: var(--primary-brown);
            font-weight: 700;
            transition: all 0.3s ease;
        }

        .quantity-btn:hover {
            background-color: var(--light-brown);
            color: white;
        }

        .quantity-input {
            width: 40px;
            height: 32px;
            text-align: center;
            border: 1px solid var(--light-brown);
            border-radius: 4px;
            margin: 0 0.5rem;
            font-weight: 600;
        }

        .cart-item-remove {
            position: absolute;
            top: 15px;
            right: 15px;
            background-color: white;
            border: none;
            border-radius: 50%;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.15);
            cursor: pointer;
            color: #dc3545;
            transition: all 0.3s ease;
        }

        .cart-item-remove:hover {
            background-color: #dc3545;
            color: white;
            transform: rotate(90deg);
        }

        .cart-summary {
            background-color: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
            height: fit-content;
        }

        .cart-summary-title {
            font-family: 'Playfair Display', serif;
            color: var(--primary-brown);
            font-weight: 600;
            font-size: 1.5rem;
            margin-bottom: 1.5rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
            padding-bottom: 0.75rem;
        }

        .summary-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1rem;
            font-size: 1rem;
        }

        .summary-total {
            display: flex;
            justify-content: space-between;
            border-top: 1px solid rgba(0, 0, 0, 0.1);
            margin-top: 1rem;
            padding-top: 1rem;
            font-weight: 700;
            font-size: 1.1rem;
        }

        .checkout-btn {
            background-color: var(--primary-brown);
            color: white;
            width: 100%;
            padding: 0.75rem;
            text-align: center;
            border-radius: 6px;
            font-weight: 500;
            letter-spacing: 0.5px; 
            font-size: 1rem;
            margin-top: 1.5rem;
            border: none;
            transition: all 0.3s ease;
        }

        .checkout-btn:hover {
            background-color: var(--secondary-brown);
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .continue-shopping {
            display: inline-block;
            color: var(--primary-brown);
            text-decoration: none;
            margin-top: 1.5rem;
            font-weight: 500;
            transition: all 0.3s ease;
        }

            .text-success {
            color: #28a745 !important;
            font-weight: 500;
        }

        .continue-shopping:hover {
            color: var(--secondary-brown);
            text-decoration: underline;
        }

        .empty-cart {
            padding: 4rem 2rem;
            text-align: center;
        }

        .empty-cart-icon {
            font-size: 4.5rem;
            color: var(--light-brown);
            margin-bottom: 1.5rem;
            opacity: 0.7;
        }

        .empty-cart h3 {
            font-family: 'Playfair Display', serif;
            color: var(--primary-brown);
            font-weight: 600;
            margin-bottom: 1rem;
        }

        .empty-cart p {
            color: #666;
            max-width: 500px;
            margin: 0 auto 1.5rem;
            font-size: 1.1rem;
        }

        .browse-books-btn {
            background-color: var(--primary-brown);
            color: white;
            padding: 0.75rem 2rem;
            border: none;
            transition: all 0.3s ease;
            border-radius: 6px;
            font-weight: 500;
            letter-spacing: 0.5px;
            font-size: 1rem;
        }

        .browse-books-btn:hover {
            background-color: var(--secondary-brown);
            color: white;
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .recommendations-section {
            background: linear-gradient(to bottom, var(--cream) 0%, rgba(245, 245, 220, 0.7) 100%);
            padding: 3rem;
            border-radius: 12px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
            position: relative;
        }

        .recommendations-section::before {
            position: absolute;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            background: url("data:image/svg+xml,%3Csvg width='20' height='20' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23a67c52' fill-opacity='0.05' fill-rule='evenodd'%3E%3Ccircle cx='3' cy='3' r='3'/%3E%3Ccircle cx='13' cy='13' r='3'/%3E%3C/g%3E%3C/svg%3E");
            border-radius: 12px;
        }

        .recommendations-section .section-title {
            text-align: center;
            margin-bottom: 2.5rem;
            display: block;
        }

        .recommendations-section .section-title::after {
            left: 50%;
            transform: translateX(-50%);
            width: 100px;
        }

        /* Book card styles */
        .book-card {
            display: flex;
            flex-direction: column;
            height: 100%;
            background-color: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
            transition: all 0.3s ease;
        }

        .book-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 12px 25px rgba(0, 0, 0, 0.15);
        }

        .book-card img {
            width: 100%;
            height: 220px;
            object-fit: contain;
            padding: 1rem;
            transition: all 0.5s ease;
        }

        .book-card:hover img {
            transform: scale(1.05);
        }

        .book-card .book-info {
            padding: 1.25rem;
            border-top: 1px solid rgba(0, 0, 0, 0.05);
            display: flex;
            flex-direction: column;
            flex: 1;
        }

        .book-card h5 {
            font-family: 'Playfair Display', serif;
            font-weight: 600;
            font-size: 1.1rem;
            line-height: 1.4;
            color: #333;
            height: 3.1rem;
            overflow: hidden;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            line-clamp: 2;
            box-orient: vertical;
            -webkit-box-orient: vertical;
            margin-bottom: 0.75rem;
        }

        .book-card .book-author {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            margin-bottom: 0.75rem;
        }

        .book-card .book-price {
            margin-top: auto;
            margin-bottom: 0.75rem;
        }

        .book-card .book-buttons {
            display: flex;
            gap: 0.75rem;
            padding: 0 1.25rem 1.25rem 1.25rem;
        }

        .book-card .btn {
            flex: 1;
            padding: 0.5rem 0;
            font-size: 0.85rem;
            border-radius: 6px;
            font-weight: 500;
            letter-spacing: 0.5px;
        }

        .nav-buttons {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background-color: white;
            display: flex;
            justify-content: space-around;
            padding: 1rem;
            box-shadow: 0 -5px 15px rgba(0, 0, 0, 0.05);
            z-index: 1000;
            border-top: 1px solid rgba(0, 0, 0, 0.05);
        }

        .nav-button {
            display: flex;
            flex-direction: column;
            align-items: center;
            text-decoration: none;
            color: var(--secondary-brown);
            transition: all 0.3s ease;
            padding: 0.5rem 1.5rem;
            position: relative;
        }

        .nav-button::after {
            content: "";
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 0;
            height: 3px;
            background-color: var(--primary-brown);
            transition: all 0.3s ease;
        }

        .nav-button:hover {
            color: var(--primary-brown);
        }

        .nav-button:hover::after {
            width: 50%;
        }

        .nav-button i {
            font-size: 1.5rem;
            margin-bottom: 0.5rem;
        }

        .nav-button span {
            font-size: 0.8rem;
            font-weight: 500;
        }

        .coupon-input {
            display: flex;
            margin-top: 1.5rem;
        }

        .coupon-input input {
            flex: 1;
            padding: 0.6rem;
            border: 1px solid var(--light-brown);
            border-radius: 6px 0 0 6px;
            font-size: 0.9rem;
        }

        .coupon-input button {
            background-color: var(--primary-brown);
            color: white;
            border: none;
            border-radius: 0 6px 6px 0;
            padding: 0 1rem;
            font-weight: 500;
            letter-spacing: 0.5px;
            transition: all 0.3s ease;
        }

        .coupon-input button:hover {
            background-color: var(--secondary-brown);
        }

        .swal2-popup {
            border-radius: 12px;
            padding: 2rem;
            font-family: 'Montserrat', sans-serif;
        }

        .swal2-title {
            font-family: 'Playfair Display', serif;
            color: #8B5A2B;
            font-weight: 600;
        }

        .swal2-content {
            color: #666;
            font-size: 1rem;
        }

        .swal2-styled.swal2-confirm {
            background-color: #8B5A2B;
            color: white;
            border-radius: 6px;
            padding: 0.75rem 2rem;
            font-weight: 500;
            letter-spacing: 0.5px;
            font-size: 1rem;
            transition: all 0.3s ease;
            box-shadow: none;
        }

        .swal2-styled.swal2-confirm:hover {
            background-color: #A67C52;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .swal2-styled.swal2-cancel {
            background-color: transparent;
            border: 1px solid #dc3545;
            color: #dc3545;
            border-radius: 6px;
            padding: 0.75rem 2rem;
            font-weight: 500;
            letter-spacing: 0.5px;
            transition: all 0.3s ease;
        }

        .swal2-styled.swal2-cancel:hover {
            background-color: #dc3545;
            color: white;
            transform: translateY(-2px);
        }

        /* Responsive adjustments */
        @media (max-width: 991px) {
            .cart-summary {
                margin-top: 2rem;
            }
        }

        @media (max-width: 768px) {
            .cart-hero-section {
                padding: 3rem 0;
            }

            .cart-hero-section h1 {
                font-size: 2.5rem;
            }

            .cart-container {
                padding: 1.5rem;
            }

            .recommendations-section {
                padding: 2rem;
            }

            .section-title {
                font-size: 1.5rem;
            }
        }

        @media (max-width: 575px) {
            .cart-item {
                flex-direction: column;
            }

            .cart-item-img {
                width: 100%;
                max-width: 150px;
                margin: 0 auto 1rem;
            }

            .quantity-input {
                width: 50px;
            }

            .cart-item-remove {
                top: 10px;
                right: 10px;
            }
        }
    </style>
</head>

<body>
    <!-- Cart Hero Section -->
    <div class="cart-hero-section container-fluid">
        <div class="container">
            <h1>Shopping Cart</h1>
            <p class="lead">Review your book selections before checkout.</p>
        </div>
    </div>

    <!-- Cart Content -->
    <div class="container mt-5 mb-5">
        <div class="cart-container">
            <div id="cart-content">
                <% if (cart?.books && cart.books.length> 0) { %>
                    <div class="row">
                        <div class="col-12 mb-4">
                            <h3 class="section-title">Your Cart</h3>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-lg-8">
                            <% cart.books.forEach(item=> { %>
                                <div class="cart-item">
                                    <img src="<%= item.product.productImages[0] %>" alt="<%= item.product.name %>"
                                        class="cart-item-img">

                                        <div class="cart-item-details">
                                            <h4 class="cart-item-title">
                                                <%= item.product.name %>
                                            </h4>
                                            <p class="cart-item-author">By <%= item.product.writer %></p>
                                            
                                            <% if (item.hasOffer) { %>
                                                <!-- Display offer badge and prices -->
                                                <div class="price-container">
                                                    <p class="cart-item-price">
                                                        <span class="discounted-price">₹<%= item.discountedPrice.toFixed(2) %></span>
                                                        <span class="original-price">₹<%= item.originalPrice.toFixed(2) %></span>
                                                    </p>
                                                    <span class="offer-badge"><%= item.offerPercentage %>% OFF</span>
                                                </div>
                                            <% } else { %>
                                                <!-- Regular price -->
                                                <p class="cart-item-price">₹<%= item.product.salePrice %></p>
                                            <% } %>
                                            
                                            <div class="cart-item-quantity">
                                                <button class="quantity-btn decrease-btn" data-id="<%= item.product._id %>">-</button>
                                                <input type="number" class="quantity-input" value="<%= item.quantity %>" min="1" max="10"
                                                    data-id="<%= item.product._id %>" data-original-value="5" readonly>
                                                <button class="quantity-btn increase-btn" data-id="<%= item.product._id %>">+</button>
                                            </div>
                                            
                                            <% if (item.hasOffer) { %>
                                                <p class="item-total">Total: ₹<%= (item.discountedPrice * item.quantity).toFixed(2) %></p>
                                            <% } else { %>
                                                <p class="item-total">Total: ₹<%= item.product.salePrice * item.quantity %></p>
                                            <% } %>
                                        </div>
                                    <button class="cart-item-remove" data-id="<%= item.product._id %>">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                                <% }); %>
                                    <div class="mt-4">
                                        <a href="/shop" class="continue-shopping">
                                            <i class="fas fa-long-arrow-alt-left me-2"></i> Continue Shopping
                                        </a>
                                    </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="cart-summary">
                                <h4 class="cart-summary-title">Order Summary</h4>
                                <div class="summary-item">
                                    <span>Subtotal</span>
                                    <span>₹<%= totalProductPrice %></span>
                                </div>
                                <div class="summary-item">
                                    <span>GST (18%)</span>
                                    <span>₹<%= gstAmount %></span>
                                </div>
                                <div class="summary-item">
                                    <span>Shipping</span>
                                    <span  class="<%= shippingCost === 0 ? 'text-success' : '' %>">
                                        <%= shippingCost === 0 ? 'FREE' : '₹60' %>
                                    </span>
                                </div>
                                <div class="summary-total">
                                    <span>Total</span>
                                    <span>₹<%= totalProductPrice + shippingCost + gstAmount %></span>
                                </div>
                                <button class="checkout-btn">
                                    <i class="fas fa-lock me-2"></i> Proceed to Checkout
                                </button>
                            </div>
                        </div>
                    </div>
                    <% } else { %>
                        <div class="empty-cart">
                            <div class="text-center">
                                <i class="fas fa-shopping-cart empty-cart-icon"></i>
                                <h3>Your cart is empty</h3>
                                <p>Your cart is currently empty. Explore our collection to discover books you'll love.
                                </p>
                                <a href="/" class="btn browse-books-btn mt-3">
                                    <i class="fas fa-book-open me-2"></i> Browse Books
                                </a>
                            </div>
                        </div>
                        <% } %>
            </div>
        </div>
    </div>

<!-- Recommendations Section -->
<div class="container mt-5 mb-5">
    <div class="recommendations-section">
        <h2 class="section-title">You Might Also Like</h2>
        <div class="row" id="recommended-books">
            <% if (typeof recommendedBooks !== 'undefined' && recommendedBooks.length > 0) { %>
                <% recommendedBooks.forEach(book => { %>
                    <div class="col-md-3 mb-4">
                        <div class="book-card">
                            <img src="<%= book.productImages[0] %>" alt="<%= book.name %>" class="img-fluid">
                            
                            <% if (book.hasOffer) { %>
                                <span class="offer-badge"><%= book.offerPercentage %>% OFF</span>
                            <% } %>
                            
                            <div class="book-info">
                                <h5><%= book.name %></h5>
                                <p class="book-author"><%= book.writer %></p>
                                
                                <% if (book.hasOffer) { %>
                                    <div class="price-container">
                                        <p class="fw-bold book-price">
                                            <span class="discounted-price">₹<%= book.discountedPrice.toFixed(2) %></span>
                                            <span class="original-price">₹<%= book.originalPrice.toFixed(2) %></span>
                                        </p>
                                    </div>
                                <% } else { %>
                                    <p class="fw-bold book-price">₹<%= book.salePrice %></p>
                                <% } %>
                            </div>
                            
                            <div class="book-buttons">
                                <button class="btn add-to-cart-btn" data-id="<%= book._id %>">
                                    <i class="fas fa-shopping-cart"></i> Add
                                </button>
                                <a href="/bookPage/<%= book._id %>" class="btn view-details-btn">
                                    <i class="fas fa-eye"></i> Details
                                </a>
                            </div>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="col-12 text-center">
                    <p>No recommendations available at the moment.</p>
                </div>
            <% } %>
        </div>
    </div>
</div>

    <!-- Navigation Buttons -->
    <div class="nav-buttons">
        <a href="/" class="nav-button">
            <i class="fas fa-home"></i>
            <span>Home</span>
        </a>
        <a href="/wishlist" class="nav-button">
            <i class="fas fa-heart"></i>
            <span>wishlist</span>
        </a>
        <!-- <a href="/wishlist" class="nav-button">
        <i class="fas fa-solid fa-bag-shopping"></i>
        <span>Shop</span>
    </a> -->
        <a href="/account" class="nav-button">
            <i class="fas  fa-user"></i>
            <span>Account</span>
        </a>
    </div>

    <!-- Add some padding to account for fixed nav buttons -->
    <div style="height: 80px;"></div>

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>-

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Handle quantity changes
            const decreaseBtns = document.querySelectorAll('.decrease-btn');
            const increaseBtns = document.querySelectorAll('.increase-btn');
            const quantityInputs = document.querySelectorAll('.quantity-input');
            const removeButtons = document.querySelectorAll('.cart-item-remove');
            const checkoutBtn = document.querySelector('.checkout-btn');
            const couponBtn = document.querySelector('.coupon-input button');
            const addToCartBtns = document.querySelectorAll('.add-to-cart-btn');

            // Decrease quantity
            decreaseBtns.forEach(btn => {
                btn.addEventListener('click', function () {
                    const productId = this.getAttribute('data-id');
                    const inputElement = document.querySelector(`.quantity-input[data-id="${productId}"]`);
                    let currentValue = parseInt(inputElement.value);

                    if (currentValue > 1) {
                        currentValue--;
                        inputElement.value = currentValue;
                        updateCartItem(productId, currentValue);
                    }
                });
            });

            // Increase quantity
            increaseBtns.forEach(btn => {
                btn.addEventListener('click', function () {
                    const productId = this.getAttribute('data-id');
                    const inputElement = document.querySelector(`.quantity-input[data-id="${productId}"]`);
                    let currentValue = parseInt(inputElement.value);

                    // Check stock availability before increasing
                    checkStockAvailability(productId, currentValue + 1).then(isAvailable => {
                        if (isAvailable) {
                            if (currentValue < 10) {
                                currentValue++;
                                inputElement.value = currentValue;
                                updateCartItem(productId, currentValue);
                            }
                        } else {
                            Swal.fire({
                                title: 'Stock Limit Reached',
                                text: 'Sorry, we don\'t have enough stock for this item.',
                                icon: 'warning',
                                toast: true,
                                position: 'top-end',
                                showConfirmButton: false,
                                timer: 3000
                            });
                        }
                    });
                });
            });

            // Update quantity via input field
            quantityInputs.forEach(input => {
                input.addEventListener('change', function () {
                    const productId = this.getAttribute('data-id');
                    let currentValue = parseInt(this.value);
                    let originalValue = parseInt(this.getAttribute('data-original-value') || 1);

                    // Validate input value
                    if (currentValue < 1) {
                        currentValue = 1;
                        this.value = currentValue;
                    } else if (currentValue > 10) {
                        currentValue = 10;
                        this.value = currentValue;
                    }

                    if (currentValue > originalValue) {
                        // Check stock availability if increasing quantity
                        checkStockAvailability(productId, currentValue).then(isAvailable => {
                            if (isAvailable) {
                                
                                updateCartItem(productId, currentValue);
                                this.setAttribute('data-original-value', currentValue);
                            } else {
                                // Revert to original value if stock not available
                                this.value = originalValue;
                                Swal.fire({
                                    title: 'Stock Limit Reached',
                                    text: 'Sorry, we don\'t have enough stock for this item.',
                                    icon: 'warning'
                                });
                            }
                        });
                    } else {
                        // No need to check stock if decreasing quantity
                        updateCartItem(productId, currentValue);
                        this.setAttribute('data-original-value', currentValue);
                    }
                }); 

                // Set initial original value
                input.setAttribute('data-original-value', input.value);
            });

            // Function to check stock availability
            function checkStockAvailability(productId, requestedQuantity) {
                return fetch('/cart/check-stock', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ bookId : productId, quantity: requestedQuantity })
                })
                    .then(response => response.json())
                    .then(data => {
                        return data.available;
                    })
                    .catch(error => {
                        console.error('Error checking stock:', error);
                        // If error occurs, assume stock is not available to be safe
                        return false;
                    });
            }

            // Remove item from cart
            removeButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const productId = this.getAttribute('data-id');

                    // Show confirmation dialog
                    Swal.fire({
                        title: 'Remove Item',
                        text: 'Are you sure you want to remove this item from your cart?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes, remove it',
                        cancelButtonText: 'No, keep it'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            removeFromCart(productId);
                        }
                    });
                });
            });

            // Checkout button
            if (checkoutBtn) {
                checkoutBtn.addEventListener('click', function () {
                    // Check stock for all items before proceeding to checkout
                    checkAllItemsStock().then(allItemsAvailable => {
                        if (allItemsAvailable) {
                            // Redirect to checkout page or handle checkout process
                            Swal.fire({
                                title: 'Proceeding to Checkout',
                                text: 'Redirecting you to secure checkout...',
                                icon: 'info',
                                timer: 2000,
                                timerProgressBar: true,
                                showConfirmButton: false
                            }).then(() => {
                                window.location.href = '/checkout';
                            });
                        } else {
                            Swal.fire({
                                title: 'Stock Issues',
                                text: 'Some items in your cart are no longer available in the requested quantity. Please review your cart.',
                                icon: 'warning',
                                confirmButtonText: 'Review Cart'
                            }).then(() => {
                                window.location.reload();
                            });
                        }
                    });
                });
            }

            // Function to check stock for all cart items
            function checkAllItemsStock() {
                const cartItems = document.querySelectorAll('.cart-item');
                const stockCheckPromises = [];

                cartItems.forEach(item => {
                    const productId = item.querySelector('.quantity-input').getAttribute('data-id');
                    const quantity = parseInt(item.querySelector('.quantity-input').value);

                    stockCheckPromises.push(
                        checkStockAvailability(productId, quantity)
                    );
                });

                return Promise.all(stockCheckPromises).then(results => {
                    // If any item is not available, return false
                    return !results.includes(false);
                });
            }

            // Apply coupon
            if (couponBtn) {
                couponBtn.addEventListener('click', function () {
                    const couponInput = document.querySelector('.coupon-input input');
                    const couponCode = couponInput.value.trim();

                    if (couponCode === '') {
                        Swal.fire({
                            title: 'Empty Coupon',
                            text: 'Please enter a coupon code',
                            icon: 'warning'
                        });
                        return;
                    }

                    applyCoupon(couponCode);
                });
            }

            // Add recommended books to cart
            addToCartBtns.forEach(btn => {
                btn.addEventListener('click', function () {
                    const productId = this.getAttribute('data-id');

                    // Check stock availability before adding to cart
                    checkStockAvailability(productId, 1).then(isAvailable => {
                        if (isAvailable) {
                            addToCart(productId);
                        } else {
                            Swal.fire({
                                title: 'Out of Stock',
                                text: 'Sorry, this item is currently out of stock.',
                                icon: 'warning'
                            });
                        }
                    });
                });
            });

            // Function to update cart item quantity
            function updateCartItem(productId, quantity) {
                // Show loading indicator
                const itemElement = document.querySelector(`.cart-item:has(.quantity-input[data-id="${productId}"])`);
                const itemTotalElement = itemElement.querySelector('.item-total');
                itemTotalElement.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Updating...';

                fetch('/cart/update', { 
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ productId, quantity })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Update item total price
                            Swal.fire({
                                title: 'Cart Updated',
                                text: 'Your cart has been updated successfully',
                                icon: 'success',
                                toast: true,
                                position: 'top-end',
                                showConfirmButton: false,
                                timer: 1000
                            });
                            const newItemTotal = data.itemPrice * quantity;
                            itemTotalElement.textContent = `Total: ₹${newItemTotal}`;

                            // Update cart summary with the new total price from the response
                            const subtotalElement = document.querySelector('.summary-item:nth-child(1) span:last-child');
                            const orderTotalElement = document.querySelector('.summary-total span:last-child');

                            if (subtotalElement && orderTotalElement) {
                                subtotalElement.textContent = `₹${data.cart.totalPrice}`;
                                orderTotalElement.textContent = `₹${data.cart.totalPrice}`;
                            }

                            // Show success message
                            Swal.fire({
                                title: 'Cart Updated',
                                text: 'Your cart has been updated successfully',
                                icon: 'success',
                                showConfirmButton: false,
                                timer: 3000
                            });
                            updateCartSummary(data.cart);

                        } else {
                            // Show error message if update failed
                            Swal.fire({
                                title: 'Update Failed',
                                text: data.message || 'Something went wrong while updating the cart',
                                icon: 'error',
                                toast: true,
                                position: 'top-end',
                                showConfirmButton: false,
                                timer: 3000
                            });
                            window.location.reload()
                        }

                    })
                    .catch(error => {
                        console.error('Error updating cart:', error);
                        itemTotalElement.textContent = 'Error updating';

                        Swal.fire({
                            title: 'Update Failed',
                            text: error,
                            icon: 'error'
                        });
                    });
            }

            // Function to remove item from cart
            function removeFromCart(productId) {
                fetch('/cart/remove', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ bookId: productId })
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Failed to remove item');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Remove the item from DOM
                        const itemElement = document.querySelector(`.cart-item:has(.quantity-input[data-id="${productId}"])`);
                        itemElement.style.opacity = '0';
                        itemElement.style.height = '0';
                        itemElement.style.margin = '0';
                        itemElement.style.padding = '0';
                        itemElement.style.overflow = 'hidden';

                        setTimeout(() => {
                            itemElement.remove();

                            // Check if cart is empty
                            const cartItems = document.querySelectorAll('.cart-item');
                            if (cartItems.length === 0) {
                                // Replace with empty cart view
                                const cartContent = document.getElementById('cart-content');
                                cartContent.innerHTML = `
                        <div class="empty-cart">
                            <div class="text-center">
                                <i class="fas fa-shopping-cart empty-cart-icon"></i>
                                <h3>Your cart is empty</h3>
                                <p>Your cart is currently empty. Explore our collection to discover books you'll love.</p>
                                <a href="/" class="btn browse-books-btn mt-3">
                                    <i class="fas fa-book-open me-2"></i> Browse Books
                                </a>
                            </div>
                        </div>
                    `;
                            } else {
                                // Update cart summary
                                updateCartSummary(data.cart);
                            }
                        }, 500);

                        // Show success message
                        Swal.fire({
                            title: 'Item Removed',
                            text: 'Item has been removed from your cart',
                            icon: 'success',
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000
                        });
                    })
                    .catch(error => {
                        console.error('Error removing item:', error);

                        Swal.fire({
                            title: 'Removal Failed',
                            text: 'Failed to remove item from cart. Please try again.',
                            icon: 'error'
                        });
                    });
            }


            // Function to add recommended book to cart 
            function addToCart(productId) {
                fetch('/cart/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ bookId: productId, quantity: 1 })
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Failed to add to cart');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Show success message
                        Swal.fire({
                            title: 'Added to Cart',
                            text: 'Book has been added to your cart',
                            icon: 'success',
                            showCancelButton: true,
                            confirmButtonText: 'View Cart',
                            cancelButtonText: 'Continue Shopping'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                window.location.href = '/cart';
                            }
                        });
                    })
                    .catch(error => {
                        console.error('Error adding to cart:', error);

                        Swal.fire({
                            title: 'Add to Cart Failed',
                            text: 'Failed to add book to cart. Please try again.',
                            icon: 'error'
                        });
                    });
            }

            // Function to update cart summary
            function updateCartSummary(cart) {
                const subtotalElement = document.querySelector('.summary-item:nth-child(1) span:last-child');
                const orderTotalElement = document.querySelector('.summary-total span:last-child');

                if (subtotalElement && orderTotalElement) {
                    const subtotal = cart.totalPrice;
                    const total = subtotal; /*subtotal + taxes;*/

                    subtotalElement.textContent = `₹${subtotal}`;
                    orderTotalElement.textContent = `₹${total}`;

                    // If there's a discount, show it
                    const discountRow = document.querySelector('.summary-item.discount-row');
                    if (cart.discount && cart.discount > 0) {
                        if (discountRow) {
                            const discountValue = discountRow.querySelector('span:last-child');
                            discountValue.textContent = `-₹${cart.discount}`;
                        } else {
                            // Create discount row if it doesn't exist
                            const newDiscountRow = document.createElement('div');
                            newDiscountRow.className = 'summary-item discount-row';
                            newDiscountRow.innerHTML = `
                        <span>Discount</span>
                        <span class="text-success">-₹${cart.discount}</span>
                    `;

                            // Insert before total
                            document.querySelector('.summary-total').before(newDiscountRow);
                        }
                    } else if (discountRow) {
                        // Remove discount row if no discount
                        discountRow.remove();
                    }
                }
            }
        });
    </script>
</body>